package com.cisco.apas.actions;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import jboolexpr.BooleanExpression;
import jboolexpr.MalformedBooleanException;

import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.InitializingBean;

import com.cisco.apas.entity.AndCondition;
import com.cisco.apas.entity.ConditionalToken;
import com.cisco.apas.entity.Country;
import com.cisco.apas.entity.EndToken;
import com.cisco.apas.entity.Leaf;
import com.cisco.apas.entity.Node;
import com.cisco.apas.entity.OrCondition;
import com.cisco.apas.entity.ParenthesisToken;
import com.cisco.apas.entity.Rule;
import com.cisco.apas.entity.Scenario;
import com.cisco.apas.entity.SiteUse;
import com.cisco.apas.entity.StartToken;
import com.cisco.apas.entity.Token;
import com.cisco.apas.service.APASService;

public class RuleAction extends BaseAction implements InitializingBean {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = Logger.getLogger(RuleAction.class);
	private APASService apasService;
	private List<Rule> allRules;
	private int count;

	public String execute() {
		if (logger.isInfoEnabled()) {
			logger.info("Calling RuleAction execute...");
		}
		return "success";
	}

	/*
	 * Create Rules
	 */
	private void extractCondition(String condition, List<Token> expression) throws JSONException {
		if (condition != null && condition.length() > 0) {
			String[] preCons = condition.split(",");
			for (int j = 0; j < preCons.length; j++) {
				if ("START_YELLOW".equals(preCons[j])) {
					expression.add(new StartToken());
				} else if ("CLOSE_YELLOW".equals(preCons[j])) {
					expression.add(new EndToken());
				} else if ("AND".equals(preCons[j])) {
					expression.add(new AndCondition());
				} else if ("OR".equals(preCons[j])) {
					expression.add(new OrCondition());
				}
			}
		}
	};

	private void extractCondition(String condition, StringBuilder sb) throws JSONException {
		if (condition != null && condition.length() > 0) {
			String[] preCons = condition.split(",");
			for (int j = 0; j < preCons.length; j++) {
				if ("START_YELLOW".equals(preCons[j])) {
					sb.append(" ( ");
				} else if ("CLOSE_YELLOW".equals(preCons[j])) {
					sb.append(" ) ");
				} else if ("AND".equals(preCons[j])) {
					sb.append(" && ");
				} else if ("OR".equals(preCons[j])) {
					sb.append(" || ");
				}
			}
		}
	};

	private String extractExpression(JSONArray expressionArray) throws JSONException {
		StringBuilder stringRV = new StringBuilder();
		for (int i = 0; i < expressionArray.length(); i++) {
			JSONObject exprNode = expressionArray.getJSONObject(i);
			extractCondition(getJSONString(exprNode, "preCondition"), stringRV);
			stringRV.append("'").append(exprNode.getString("value")).append("'");
			extractCondition(getJSONString(exprNode, "postCondition"), stringRV);
		}
		return stringRV.toString();
	};

	private Leaf extractLeaf(JSONObject leafObject) throws JSONException {
		Leaf returnObject = new Leaf();
		if ("Boolean".equalsIgnoreCase(leafObject.getString("type"))) {
			returnObject.setRuleExpressionType("Boolean");
			JSONArray data = leafObject.getJSONArray("data");
			returnObject.setPartnerType(extractExpression(data.getJSONArray(0)));
			returnObject.setExpression(extractExpression(data.getJSONArray(1)));
			returnObject.setQualRuleCountry(getJSONString(data.getJSONArray(2).getJSONObject(0), "value"));
			returnObject.setQualRuleFor();
		} else if ("ARITHMETIC".equalsIgnoreCase(leafObject.getString("type"))) {
			returnObject.setRuleExpressionType("ARITHMETIC");
		} else if ("CustomerProfile".equalsIgnoreCase(leafObject.getString("type"))) {
			returnObject.setRuleExpressionType("CustomerProfile");
		}
		return returnObject;
	};

	private Scenario extractScenario(JSONObject scenarioObject) throws JSONException {
		Scenario returnObject = new Scenario();
		JSONObject leaf;
		JSONArray leafCollection = scenarioObject.getJSONArray("leafCollection");
		for (int i = 0; i < leafCollection.length(); i++) {
			leaf = leafCollection.getJSONObject(i);
			extractCondition(getJSONString(leaf, "preConnector"), returnObject.getTokenExpressions());
			returnObject.getTokenExpressions().add(extractLeaf(leaf));
			extractCondition(getJSONString(leaf, "postConnector"), returnObject.getTokenExpressions());
		}
		return returnObject;
	};

	private void addErrorMessage(String errorMessage, JSONArray errorMessages) {
		try {
			JSONObject jo = new JSONObject();
			jo.put("message", errorMessage);
			jo.put("severity", "error");
			errorMessages.put(jo);
		} catch (JSONException je) {
			je.printStackTrace();
		}
	}

	private Rule getRuleFrom(String ruleStr, JSONArray errorMessages) {
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
		Rule oRule = new Rule();
		String errorMessage = "";
		try {
			JSONObject ruleJSON = new JSONObject(ruleStr);
			errorMessage = "Rule Format incorrect";
			JSONObject preC = ruleJSON.getJSONObject("preConditions");
			oRule.setRuleName(preC.getString("ruleName"));
			if (getJSONString(ruleJSON, "ruleId") != null && !getJSONString(ruleJSON, "ruleId").equals("undefined")) {
				oRule.setId(Long.valueOf(getJSONString(ruleJSON, "ruleId")));
			}
			Node node = new Node();
			errorMessage = "Node ID not available";
			node.setId(ruleJSON.getLong("nodeId"));
			oRule.setNode(node);
			errorMessage = "Please select applicable Intended Use";
			String iUse = preC.getString("intendedUse");
			oRule.setIntendedUse(Arrays.asList(iUse.split(",")));
			errorMessage = "Please select the Route to Market the rule is applicable for";
			oRule.setRouteToMarket(preC.getString("applyRuleFor"));
			errorMessage = "Invalid Effective Start Date";
			oRule.setEffectiveStartDate(simpleDateFormat.parse(preC.getString("startDate")));
			String endDate = getJSONString(preC, "endDate");
			if(endDate != null && endDate.trim().length() > 0) {
				oRule.setEffectiveEndDate(simpleDateFormat.parse(endDate));	
			}
			errorMessage = "Error fetching scenarios in the rule";
			JSONArray jsonArray = ruleJSON.getJSONArray("scenarios");
			List<Country> countries = new ArrayList<Country>();
			countries.addAll(getCountryList(SiteUse.I, getJSONString(preC, "installCountries")));
			countries.addAll(getCountryList(SiteUse.B, getJSONString(preC, "billingCountries")));
			countries.addAll(getCountryList(SiteUse.A, getJSONString(preC, "applicableCountries")));
			if (countries.size() == 0) {
				addErrorMessage("Please select countries applicable for the rule", errorMessages);
			}
			oRule.setCountries(countries);
			int totalScenarios = jsonArray.length();
			JSONObject scenario;
			for (int i = 0; i < totalScenarios; i++) {
				errorMessage = "Scenario Format incorrect : Scenario No " + (i + 1);
				scenario = jsonArray.getJSONObject(i);
				extractCondition(getJSONString(scenario, "preConnector"), oRule.getTokenExpressions());
				oRule.getTokenExpressions().add(extractScenario(scenario));
				extractCondition(getJSONString(scenario, "postConnector"), oRule.getTokenExpressions());
			}
			errorMessage = "Error validating Rule expression";
			validateRuleExpression(oRule, errorMessages);
		} catch (JSONException e) {
			e.printStackTrace();
			addErrorMessage(errorMessage, errorMessages);
		} catch(ParseException pe) {
			pe.printStackTrace();
			addErrorMessage(errorMessage, errorMessages);
		}
		return oRule;
	}

	private void validateRuleExpression(Rule rule, JSONArray errorMessages) {
		StringBuilder sb = new StringBuilder();
		for (Token token : rule.getTokenExpressions()) {
			if (token.getClass() == Scenario.class) {
				sb.append(" true ");
			} else {
				sb.append(token.getTokenValue()).append(" ");
			}
		}
		try {
			BooleanExpression.readLeftToRight(sb.toString()).booleanValue();
		} catch (MalformedBooleanException mbe) {
			addErrorMessage("Invalid Rule Expression", errorMessages);
			return;
		}
		for (Token token : rule.getTokenExpressions()) {
			if (token.getClass() == Scenario.class) {
				Scenario scenario = (Scenario) token;
				sb = new StringBuilder();
				for (Token token2 : scenario.getTokenExpressions()) {
					if (token2.getClass() == Leaf.class) {
						sb.append(" true ");
						Leaf leaf = (Leaf) token2;
						if ("Boolean".equals(leaf.getRuleExpressionType())) {
							try {
								runRule(leaf.getExpression());
								runRule(leaf.getPartnerType());
							} catch (Exception e) {
								e.printStackTrace();
								addErrorMessage("Invalid Leaf Expression", errorMessages);
								return;
							}
						}
					} else {
						sb.append(token2.getTokenValue()).append(" ");
					}
				}
				try {
					BooleanExpression.readLeftToRight(sb.toString()).booleanValue();
				} catch (MalformedBooleanException mbe) {
					addErrorMessage("Invalid Scenario Expression", errorMessages);
					return;
				}
			}
		}
	}

	private boolean runRule(String regEx) throws Exception {
		while (regEx.indexOf("'") >= 0) {
			int charStartPos = regEx.indexOf("'", 0);
			if (charStartPos >= 0) {
				int charEndPos = regEx.indexOf("'", charStartPos + 1);
				if (charEndPos < 0) {
					throw new Exception("Malformed Boolean Expression");
				}
				regEx = regEx.replaceAll(regEx.substring(charStartPos, charEndPos + 1), "false");
			}
		}
		return BooleanExpression.readLeftToRight(regEx).booleanValue();
	}

	private String getJSONString(JSONObject jO, String attrName) {
		try {
			return jO.getString(attrName);
		} catch (JSONException je) {
		}
		return null;
	}

	private List<Country> getCountryList(SiteUse siteUse, String countriesStr) {
		List<Country> countries = new ArrayList<Country>();
		try {
			if (countriesStr != null) {
				String[] countryArray = countriesStr.split(",");
				for (int i = 0; i < countryArray.length; i++) {
					if (countryArray[i].trim().length() == 0) {
						continue;
					}
					Country country = new Country();
					country.setCountry(countryArray[i]);
					country.setUsageType(siteUse);
					countries.add(country);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return countries;
	}

	private JSONObject fetchErrorJSON(JSONArray jsonArray) {
		JSONObject jo = new JSONObject();
		try {
			jo.put("status", "error");
			jo.put("data", jsonArray);
		} catch (JSONException je) {
			je.printStackTrace();
		}
		return jo;
	}
	
	private JSONArray getEEACountryList() {
		JSONArray array = new JSONArray();
		for(Country country : getApasApplicationContext().getCountries()) {
			if(country.isEeaFlag()) {
				array.put(country.getIsoCountryCode());	
			}
		}
		return array;
	}

	public String create() {
		// {"tabId":"tabs-1","nodeId":"undefined","preConditions":{"nodeName":"Node Name","ruleName":"Rule name","startDate":"01/1/2010","endDate":"01/1/2011","applyRuleFor":"1T-2T","intendedUse":"10,11,12"},"scenario":[{"scenarioName":"Scenario","leafCollection":[{"name":"Leaf","connector":"AND","data":[[{"id":3,"name":"SP","preCondition":"START_YELLOW","postCondition":"NULL","preConditionText":"","postConditionText":"","value":"","type":""},{"id":2,"name":"DVAR","preCondition":"OR","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}],[{"id":11,"name":"Cert: Gold\n\t\t\t\t\t\t\t\t\t\t\tCertified Partner","preCondition":"START_YELLOW","postCondition":"NULL","preConditionText":"","postConditionText":"","value":"","type":""},{"id":12,"name":"Cert: Premire\n\t\t\t\t\t\t\t\t\t\t\tCertified Partner","preCondition":"OR","postCondition":"NULL","preConditionText":"","postConditionText":"","value":"","type":""},{"id":13,"name":"Cert: Select\n\t\t\t\t\t\t\t\t\t\t\tCertified Partner","preCondition":"OR","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}],[{"id":32,"name":"Install","preCondition":"START_YELLOW","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}],[{"id":"1","name":"Partner","preCondition":"START_YELLOW","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}]]},{"name":"Leaf","connector":"AND","data":[[{"id":2,"name":"DVAR","preCondition":"START_YELLOW","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}],[{"id":11,"name":"Cert: Gold\n\t\t\t\t\t\t\t\t\t\t\tCertified Partner","preCondition":"START_YELLOW","postCondition":"NULL","preConditionText":"","postConditionText":"","value":"","type":""},{"id":12,"name":"Cert: Premire\n\t\t\t\t\t\t\t\t\t\t\tCertified Partner","preCondition":"OR","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}],[{"id":32,"name":"Install","preCondition":"START_YELLOW","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}],[{"id":"1","name":"Partner","preCondition":"START_YELLOW","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}]]}],"preConnector":"START_YELLOW","postConnector":"AND"},{"scenarioName":"Scenario","leafCollection":[{"name":"Leaf","connector":"AND","data":[[{"id":2,"name":"DVAR","preCondition":"START_YELLOW","postCondition":"NULL","preConditionText":"","postConditionText":"","value":"","type":""},{"id":1,"name":"Distributor","preCondition":"OR","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}],[{"id":11,"name":"Cert: Gold\n\t\t\t\t\t\t\t\t\t\t\tCertified Partner","preCondition":"START_YELLOW","postCondition":"NULL","preConditionText":"","postConditionText":"","value":"","type":""},{"id":12,"name":"Cert: Premire\n\t\t\t\t\t\t\t\t\t\t\tCertified Partner","preCondition":"OR","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}],[{"id":31,"name":"Billing","preCondition":"START_YELLOW","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}],[{"id":"1","name":"Partner","preCondition":"START_YELLOW","postCondition":"CLOSE_YELLOW","preConditionText":"","postConditionText":"","value":"","type":""}]]}],"preConnector":"START_YELLOW","postConnector":"AND"}]}
		String ruleStr = request.getParameter("ruleParam");
		if (ruleStr != null && ruleStr.trim().length() > 0) {
			JSONArray errorMessages = new JSONArray();
			Rule rule = getRuleFrom(ruleStr, errorMessages);
			if (errorMessages.length() > 0) {
				sendJSONObject(fetchErrorJSON(errorMessages));
			} else {
			
				apasService.saveRule(request.getRemoteUser(), rule, rule.getNode().getId());
				sendJSONObject(fetchRuleJSON(rule.getId()));
			}
			return null;
		}
		request.setAttribute("qualifications", getApasApplicationContext().getQualificationJSON());
		request.setAttribute("countries", getApasApplicationContext().getCountryJSON());
		request.setAttribute("eeaCountryList", getEEACountryList());
		return "create";
	}

	/*
	 * Create Rules
	 */
	public String edit() {
		request.setAttribute("qualifications", getApasApplicationContext().getQualificationJSON());
		request.setAttribute("countries", getApasApplicationContext().getCountryJSON());
		request.setAttribute("eeaCountryList", getEEACountryList());
		return "edit";
	}

	private JSONObject fetchRuleJSON(Long ruleID) {
		Rule rule = apasService.getRule(ruleID);
		return getRuleJSON(rule);
	}

	public String fetchRule() {
		sendJSONObject(fetchRuleJSON(Long.valueOf(request.getParameter("ruleId"))));
		return null;
	}
	
	public String delete() {
		try {
			JSONArray jsonArray = new JSONArray(request.getParameter("ruleId"));
			Integer[] idsToDelete = new Integer[jsonArray.length()];
			for(int i = 0; i < jsonArray.length(); i++) {
				idsToDelete[i] = Integer.parseInt(String.valueOf(jsonArray.get(i)));
				
			}

			JSONObject jsonResponse = new JSONObject();
			boolean success = getApasService().deleteRule(idsToDelete);
			if (success) {
				jsonResponse.put("status", "success");
			} else {
				jsonResponse.put("status", "failure");
			}

			sendJSONObject(jsonResponse);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}

	private void populateCountryList(JSONObject jo, List<Country> countries) throws JSONException {
		StringBuilder i = new StringBuilder();
		StringBuilder b = new StringBuilder();
		StringBuilder a = new StringBuilder();
		for (Country country : countries) {
			switch (country.getUsageType()) {
			case I:
				addConnector(i, country.getCountry());
				break;
			case B:
				addConnector(b, country.getCountry());
				break;
			case A:
				addConnector(a, country.getCountry());
				break;
			}
		}
		if (i.length() > 0) {
			jo.put("installCountries", i.toString());
		}
		if (b.length() > 0) {
			jo.put("billingCountries", b.toString());
		}
		if (a.length() > 0) {
			jo.put("applicableCountries", a.toString());
		}
	}

	private JSONObject getRuleJSON(Rule rule) {
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
		JSONObject ro = new JSONObject();
		try {
			JSONObject returnValue = new JSONObject();
			JSONObject preConditions = new JSONObject();
			preConditions.put("intendedUse", rule.getIntendedUseString());
			preConditions.put("applyRuleFor", rule.getRouteToMarket());
			preConditions.put("ruleName", rule.getRuleName());
			preConditions.put("startDate", simpleDateFormat.format(rule.getEffectiveStartDate()));
			if(rule.getEffectiveEndDate() != null) {
				preConditions.put("endDate", simpleDateFormat.format(rule.getEffectiveEndDate()));	
			}
			populateCountryList(preConditions, rule.getCountries());
			JSONArray scenarios = new JSONArray();
			JSONObject scenario = new JSONObject();
			StringBuilder connector = new StringBuilder();
			boolean preCondition = true;
			boolean lastTokenIsScenario = true;
			for (Token token : rule.getTokenExpressions()) {
				if (token instanceof ConditionalToken || token instanceof ParenthesisToken) {
					lastTokenIsScenario = false;
					if (token instanceof AndCondition) {
						addConnector(connector, "AND");
					} else if (token instanceof OrCondition) {
						addConnector(connector, "OR");
					} else if (token instanceof StartToken) {
						addConnector(connector, "START_YELLOW");
					} else if (token instanceof EndToken) {
						addConnector(connector, "END_YELLOW");
					}
				} else if (token instanceof Scenario) {
					lastTokenIsScenario = true;
					if (preCondition) {
						preCondition = false;
						scenario.put("preConnector", connector.toString());
					} else {
						scenario.put("postConnector", connector.toString());
						scenarios.put(scenario);
						connector = new StringBuilder();
						scenario = new JSONObject();
					}
					Scenario scenario2 = (Scenario) token;
					scenario.put("leafCollection", getLeafCollection(scenario2));
					scenario.put("id", scenario2.getId());
				}
			}
			if (!lastTokenIsScenario) {
				scenario.put("postConnector", connector.toString());
			}
			scenarios.put(scenario);
			returnValue.put("scenarios", scenarios);
			returnValue.put("preConditions", preConditions);
			returnValue.put("nodeId", rule.getNodeId());
			returnValue.put("nodeName", rule.getNode().getName());
			returnValue.put("ruleId", rule.getId());
			returnValue.put("ruleName", rule.getRuleName());
			ro.put("status", "success");
			ro.put("data", returnValue);
		} catch (JSONException je) {
			je.printStackTrace();
		}
		return ro;
	}

	private JSONArray getLeafCollection(Scenario scenario) throws JSONException {
		JSONArray jA = new JSONArray();
		boolean lastTokenIsLeaf = true;
		boolean preCondition = true;
		StringBuilder connector = new StringBuilder();
		JSONObject leaf = new JSONObject();
		for (Token token : scenario.getTokenExpressions()) {
			if (token instanceof ConditionalToken || token instanceof ParenthesisToken) {
				lastTokenIsLeaf = false;
				if (token instanceof AndCondition) {
					addConnector(connector, "AND");
				} else if (token instanceof OrCondition) {
					addConnector(connector, "OR");
				} else if (token instanceof StartToken) {
					addConnector(connector, "START_YELLOW");
				} else if (token instanceof EndToken) {
					addConnector(connector, "END_YELLOW");
				}
			} else if (token instanceof Leaf) {
				lastTokenIsLeaf = true;
				if (preCondition) {
					preCondition = false;
					leaf.put("preConnector", connector.toString());
				} else {
					leaf.put("postConnector", connector.toString());
					jA.put(leaf);
					connector = new StringBuilder();
					leaf = new JSONObject();
				}
				Leaf leaf2 = (Leaf) token;
				leaf.put("id", leaf2.getId());
				leaf.put("type", leaf2.getRuleExpressionType());
				if ("Boolean".equals(leaf2.getRuleExpressionType())) {
					leaf.put("data", getDataArray(leaf2));
				} else if ("ARITHMETIC".equals(leaf2.getRuleExpressionType())) {
					JSONArray array = new JSONArray();
					JSONArray array1 = new JSONArray();
					JSONObject jsonObject = new JSONObject();
					jsonObject.put("name", "customer-type");
					jsonObject.put("type", "Arithmetic");
					jsonObject.put("value", "G3100");
					array1.put(jsonObject);
					array.put(array1);
					leaf.put("data", array);
				} else if ("CustomerProfile".equals(leaf2.getRuleExpressionType())) {
				}
			}
		}
		if (!lastTokenIsLeaf) {
			leaf.put("postConnector", connector.toString());
		}
		jA.put(leaf);
		return jA;
	}

	private JSONArray getDataArray(Leaf leaf) throws JSONException {
		JSONArray array = new JSONArray();
		if(leaf.getPartnerType()!= null) {
			array.put(getExpressionArray(tokenizeExpression(leaf.getPartnerType(), true)));	
		} else {
			array.put(new JSONArray());
		}
		array.put(getExpressionArray(tokenizeExpression(leaf.getExpression(), true)));
		array.put(getDataArray(leaf.getQualRuleCountry(), "I".equals(leaf.getQualRuleCountry()) ? "Install" : "Billing"));
		array.put(getDataArray(leaf.getQualRuleFor(), "P".equals(leaf.getQualRuleFor()) ? "Partner" : "Distributor"));
		return array;
	}

	private JSONArray getExpressionArray(List<String> tokens) throws JSONException {
		JSONArray array = new JSONArray();
		JSONObject type = new JSONObject();
		StringBuilder condition = new StringBuilder();
		boolean preCon = true;
		boolean lastTokenIsType = true;
		for (String token : tokens) {
			lastTokenIsType = false;
			if ("(".equals(token)) {
				addConnector(condition, "START_YELLOW");
			} else if (")".equals(token)) {
				addConnector(condition, "CLOSE_YELLOW");
			} else if ("&&".equals(token)) {
				addConnector(condition, "AND");
			} else if ("||".equals(token)) {
				addConnector(condition, "OR");
			} else {
				lastTokenIsType = true;
				if (preCon) {
					preCon = false;
					type.put("preCondition", condition.toString());
				} else {
					type.put("postCondition", condition.toString());
					array.put(type);
					type = new JSONObject();
				}
				condition = new StringBuilder();
				type.put("value", token);
				type.put("name", getTokenName(token));
			}
		}
		if (!lastTokenIsType) {
			type.put("postCondition", condition.toString());
		}
		array.put(type);
		return array;
	}

	private String getTokenName(String token) {
		try {
			return getApasApplicationContext().getQualifications().get(token).getDesc();
		} catch (NullPointerException npe) {
			return token;
		}
	}

	private JSONArray getDataArray(String iStr, String nStr) throws JSONException {
		JSONArray array = new JSONArray();
		JSONObject jo = new JSONObject();
		jo.put("value", iStr);
		jo.put("name", nStr);
		array.put(jo);
		return array;
	}

	private void addConnector(StringBuilder sb, String connector) {
		if (sb.length() > 0) {
			sb.append(",");
		}
		sb.append(connector);
	}

	public String load() {
		if (logger.isInfoEnabled()) {
			logger.info("Calling RuleAction load...");
		}
		try {
			int start = Integer.parseInt(request.getParameter("start"));
			int end = Integer.parseInt(request.getParameter("end"));
			int pageSize = Integer.parseInt(request.getParameter("pagesize"));
			int totalRecords = getApasService().getRulesCount();
			List<Rule> rules = getApasService().getAllRules(start, end, pageSize);
			JSONObject jsonResponse = new JSONObject();
			jsonResponse.put("totalRows", totalRecords);
			JSONArray jsonRowsArray = new JSONArray();
			JSONObject jsonRow = null;
			for (Rule rule : rules) {
				jsonRow = new JSONObject();
				jsonRow.put("ruleId", rule.getId());
				jsonRow.put("name", rule.getRuleName());
				updateAuditableFields(jsonRow, rule);
				jsonRowsArray.put(jsonRow);
			}
			jsonResponse.put("rows", jsonRowsArray);
			sendJSONObject(jsonResponse);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public void afterPropertiesSet() throws Exception {
		// TODO Auto-generated method stub
	}

	public List<Rule> getAllRules() {
		return allRules;
	}

	public void setAllRules(List<Rule> allRules) {
		this.allRules = allRules;
	}

	public int getCount() {
		return count;
	}

	public void setCount(int count) {
		this.count = count;
	}

	public APASService getApasService() {
		return apasService;
	}

	public void setApasService(APASService apasService) {
		this.apasService = apasService;
	}

	private List<String> tokenizeExpression(String expr, boolean removeSingleQuotes) {
		String[] operators = { "\\|\\|", "\\&\\&", "\\(", "\\)" };
		String[] rVals = { ",OR,", ",AND,", ",START_YELLOW,", ",END_YELLOW," };
		String iPut = expr;
		for (int i = 0; i < operators.length; i++) {
			iPut = iPut.replaceAll(operators[i], rVals[i]);
		}
		String[] arrayHolder = iPut.split(",");
		List<String> tokens = new ArrayList<String>();
		for (int i = 0; i < arrayHolder.length; i++) {
			String token = arrayHolder[i].trim();
			if (token.length() == 0) {
				continue;
			} else if ("OR".equals(token)) {
				tokens.add("||");
			} else if ("AND".equals(token)) {
				tokens.add("&&");
			} else if ("START_YELLOW".equals(token)) {
				tokens.add("(");
			} else if ("END_YELLOW".equals(token)) {
				tokens.add(")");
			} else {
				tokens.add(removeSingleQuotes ? token.replaceAll("'", "") : token);
			}
		}
		return tokens;
	}
}
