package com.cisco.apas.entity;

import java.util.List;
import java.util.Date;

public class Rule extends AbstractRuleEntity {

	private static final long serialVersionUID = -6574367965245081890L;
	
	private List<Country> countries;
	private Date effectiveEndDate;
	private Date effectiveStartDate;
	private List<String> intendedUse;
	
	private Node node;
	
	private String routeToMarket;
	private List<Scenario> scenarios;
	
	private Long nodeId;
	
	public Date getEffectiveEndDate() {
		return effectiveEndDate;
	}
	public Date getEffectiveStartDate() {
		return effectiveStartDate;
	}
	
	public List<String> getIntendedUse() {
		return intendedUse;
	}

	public String getRouteToMarket() {
		return routeToMarket;
	}
	public List<Scenario> getScenarios() {
		return scenarios;
	}
	
	public void setEffectiveEndDate(Date effectiveEndDate) {
		this.effectiveEndDate = effectiveEndDate;
	}
	public void setEffectiveStartDate(Date effectiveStartDate) {
		this.effectiveStartDate = effectiveStartDate;
	}
		
	public void setIntendedUse(List<String> intendedUse) {
		this.intendedUse = intendedUse;
	}
	
	public String getIntendedUseString() {
		StringBuilder sB = new StringBuilder();
		for (String inString : intendedUse) {
			sB.append(inString).append(",");
		}
		if (sB.length() > 0) {
			sB.setCharAt(sB.length() - 1, ' ');
		}
		return sB.toString().trim();
	}
	
	public void setRouteToMarket(String routeToMarket) {
		this.routeToMarket = routeToMarket;
	}
	public void setScenarios(List<Scenario> scenarios) {
		this.scenarios = scenarios;
	}
	public List<Country> getCountries() {
		return countries;
	}
	public void setCountries(List<Country> countries) {
		this.countries = countries;
	}
	
	public Node getNode() {
		return node;
	}
	public void setNode(Node node) {
		this.node = node;
	}
	
	public void populateTokenExpression() {
		List<String> tokens = tokenizeExpression(this.getExpression(), false);
		System.out.println(tokens);
		for(String token : tokens) {
			if(token == null || token.length() == 0) {
				continue;
			} else if("(".equals(token)) {
				getTokenExpressions().add(new StartToken());
			} else if(")".equals(token)) {
				getTokenExpressions().add(new EndToken());
			} else if("&&".equals(token)) {
				getTokenExpressions().add(new AndCondition());
			} else if("||".equals(token)) {
				getTokenExpressions().add(new OrCondition());
			} else {
				Scenario scenario = getScenario(Long.valueOf(token));
				getTokenExpressions().add(scenario);
			}
		}
	}
	
	private Scenario getScenario(Long id) {
		for(Scenario scenario : scenarios) {
			if(id.equals(scenario.getId())) {
				return scenario;
			}
		}
		return null;
	}
	public Long getNodeId() {
		return nodeId;
	}
	public void setNodeId(Long nodeId) {
		this.nodeId = nodeId;
	}
}