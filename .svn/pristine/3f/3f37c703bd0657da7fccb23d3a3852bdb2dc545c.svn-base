 
 		(function () {   
 			var	tabTemplate = "<li><a href='#{href}'>#{label}</a> <span class='ui-icon ui-icon-close'>Remove Tab</span></li>",
 			tabCounter = 1;
 			//Now show the tab.
 		    var tabs = $( "#tabs" ).tabs();	
 		    $targetTabId = null;	
 		    //NodeScenario CSS Selector
 		    var nodeMainAreaDOM = $('.nodeMainArea');
 		  //Component to be updated with values.
 			$scenarioOrLeafToBePopulated = null; 
 			
            $.fn.editRuleNS = function() {
                this.renderEditRules = parts.renderEditRules;                 
                return this;
            } 
            var parts = {
            	renderEditRules: function() {                	
            		startRenderingRules();
                },
            }; 
            
            /**
    	 	 * Start Rendering Rules
    	 	 */
    	 	function startRenderingRules(){
    	 		//Start rendering the rules.
    			getRulesJSON();
    			//getRulesJSONDummy();
    			
    	 	}
    	 	
    	 	/**
    	 	 * Function to get Rules JSON
    	 	 */
    	 	function getRulesJSONDummy(){
    	 		var data = localStorage.getItem("rule");
    	 		$(".someDummySelector").renderRules(JSON.parse(data)); 
    	 		$('.body').ruleNamespace().reposition();
    	 		$('.body').ruleNamespace().applyConditionsForEditRule(JSON.parse(data));
    	 	}
    	 	
    	 	/**
    	 	 * Get the rules JSON related to a specific Rule Id.
    	 	 */
    	 	function getRulesJSON(){
    	 		//get the Rule Id from the DOm.
    	 		ruleId =$('.ruleId').val();	 		
    			$.ajax({
    			    type: "POST",
    			    url: "rule_fetchRule.do",
    			    data: {"ruleId":ruleId},
    			    dataType: "json",
    			    success: function(data){	
    			    	if(data.status == null || data.status == "undefined" || data.status == "failure"){
    			    		var message = "Oops..Some technical glitch..Please contact the site administrator.";
        			    	$("body").ruleNamespace().customErrorHandler(message);
    			    	}else{
    			    		//console.log(data);
        			    	$(".someDummySelector").renderRules(data);
        			    	$('.someDummySelector').ruleNamespace().reposition();
        	    	 		$('.someDummySelector').ruleNamespace().applyConditionsForEditRule(data);
    			    	}
    			    },    			    
    			    error: function(data){
    			    	var message = "Oops..Some technical glitch..Please contact the site administrator.";
    			    	$("body").ruleNamespace().customErrorHandler(message);
    			    },	
    		   });
    		}
         })(jQuery);   
		
(function () {
	 	
	 	/**
	 	 * Get the rules JSON related to a specific Rule Id.
	 	 */
	 	function getRulesJSON(){
	 		//get the Rule Id from the DOm.
	 		ruleId =$('.ruleId').val();	 		
			$.ajax({
			    type: "POST",
			    url: "rule_fetchRule.do",
			    data: {"ruleId":ruleId},
			    dataType: "json",
			    success: function(data){			    	
			    	//console.log(data);
			    	$(".someDummySelector").renderRules(data); 
			    },
			    failure: function(error){
			    	alert('Something has failed..Try again later');
		        },
		   });
		}
	 
 	})(jQuery);

$("document").ready(function(){	
			
		var	tabTemplate = "<li><a href='#{href}'>#{label}</a> <span class='ui-icon ui-icon-close'>Remove Tab</span></li>",
		tabCounter = 1;
		//Now show the tab.
	    var tabs = $( "#tabs" ).tabs();	
	    $targetTabId = null;	
	    //NodeScenario CSS Selector
	    var nodeMainAreaDOM = $('.nodeMainArea');
	  //Component to be updated with values.
    	$scenarioOrLeafToBePopulated = null;
	    /**
	 	 * If the user comes to Rule,we assume that he has some rules to be edited.
		 * Render the rules thats stored in LocalStorage or from the server.
		 */
	 	(function($) {
		 jQuery.fn.renderRules=function(ruleObj) {
			 
			 //console.log(ruleObj);
			//Start with Building the tabs. STEP 1 
			$targetTabId= buildTabs(ruleObj);
			//alert('caling fsReRenderRuleFieldsForEdit');
			//Now set the values for PreConditions.
			//TODO karthik commented
			fsReRenderRuleFieldsForEdit(ruleFieldArray,ruleObj);
			//Now render the templates for Scenarios and Leaf.
			buildScenario();
			 //Open the first tab
		    $("#tabs").tabs({selected: 0});
		     //Builds a Scenario START
		     /**
		     * Iterate through each Scenario and get the leaf collection.
		     * Display the components accordingly.
		     */
		    function buildScenario(){
		    	var temp = ruleObj.data.scenarios;
		    	//Each Scenario should have atleast one leaf collection
		    	for (var index = 0; index < temp.length; index++) {
					buildLeaf(temp[index]);
				}
		    }
		    //Builds a Scenario END
		    //Build Leaf START
		    function buildLeaf(scenarioObj){
		    	var leafArray = scenarioObj.leafCollection;
		    	//Iterate the leaf
				for (var index = 0; index < leafArray.length; index++) {					
					//If its the first Leaf,then connect the scenario with the first leaf				
					addScenarioAndLeaf(leafArray[index],index);
				}		
		    }
		    
		    /**
		     * Method to rerender the precondition while editing.
		     */

		    function fsReRenderRuleFieldsForEdit(fields,ruleObj){	
		    	//Iterate through the fields and set one by one.
		    	 $.each(fields, function(key, value) {
		    		 var fieldvalue = value.field;
		    		 var dataType = value.datatype;		
		    		 
		    		 //PreConditions from RuleObject
		    		 preConditions = ruleObj.data.preConditions;
		    		 //set the Rule Name and Node Name in Preconditions.For our convenience.
		    		 preConditions['ruleName'] = ruleObj.data.ruleName;
		    		 preConditions['ruleId'] = ruleObj.data.ruleId;
		    		 preConditions['nodeId'] = ruleObj.data.nodeId;
		    		 preConditions['nodeName'] = ruleObj.data.nodeName;
		    		
		    		 //console.log(preConditions);
		    		
		    		//For input details like NOde Name,Rule Name Start Date and End Date. 
		    	 	if (dataType == "text") {
		    	 		 //console.log(fieldvalue);
		    	 		if(preConditions[fieldvalue] != null && preConditions[fieldvalue] != "undefined"){
		    	 			 $("input[name=" + fieldvalue + "]").val(preConditions[fieldvalue]);
		    	 		}
		        	}        
		    		 //For datatype Checkboxes.
		    		 if(dataType == "checkbox" || dataType == "option"){
		    			//Select the checkboxes based on value from the preconditions data
		    		 	if(preConditions[fieldvalue] != null && preConditions[fieldvalue] != "undefined"){
		    		 		var splitValue =preConditions[fieldvalue].split(',');
		    		 		//Iterate each of the input checkbox element and compare with the preconditions.
		    		 		$.each($("input[name='" + fieldvalue + "[]']"), function() {
		    		 			//Holds the checkbox value
		    		 			var checkboxVal = $(this).val();
		    		 			var result = $.grep(splitValue, function(e){return e === checkboxVal });		 			
		    		 			//If value is found with grep,then check that value.
		    		 			if(result.length == 1){
		    		 				$(this).attr('checked', true);
		    		 			}
		    		 		});
		    			 }		        
		    	     }  
		    	 });
		    }
		    
		    /**
		     * Add Scenario and leaf to the DOM.
		     */
		    function addScenarioAndLeaf(leafObj,index){	
		    	//console.log(leafObj);
		    	//Holds the updated DOM
		    	var el = null;
		    	//Holds the $tierAreaTemplate 
		    	var templateDefault = null;
		    	//Get the tab Panel where we are going to add the Scenarios and Leafs
				$tabPanel = "#" + $targetTabId;		
				//if index ==0 ,always add Scenario .
				//Now check if there is Scenario added already,if so..position this one properly.
				var lastNodeScenarioInDOM=$($tabPanel).find(".nodesenario1:last");	
				if(index ==0){					
					//If the second Scenario is added,then we should provide the tier Area for the Scenario.
					if(lastNodeScenarioInDOM.length != 0){
						//Check if customer profile.Then show Customer profile..Else show normal scenario.
						if(leafObj.type == 'CustomerProfile'){
							//This is the first Scenario being added to the DOM.
							templateDefault =_.template($('#node-scenario-template-customer-profile').html(), { cssName: "",top: '',tierArea:'',dataTop:"0"});												
							el =  $($tabPanel).find('.nodeMainArea').append(templateDefault);
						}else{
							$tierAreaTemplate = _.template($('#tier-border-scenario').html(), {height: '',tierTop:'' });
							templateDefault =_.template($('#node-scenario-template').html(), { cssName: ' nodesenario2', top: '' ,tierArea:$tierAreaTemplate,dataTop:''});						
							el =$(lastNodeScenarioInDOM).after(templateDefault);	
							//Nasty fix to get the last added Scenario
							el = $($tabPanel).find(".nodesenario1:last");	
						}
					}else{
						//Check if customer profile.Then show Customer profile..Else show normal scenario.
						if(leafObj.type == 'CustomerProfile'){
							//This is the first Scenario being added to the DOM.
							templateDefault =_.template($('#node-scenario-template-customer-profile').html(), { cssName: "",top: '',tierArea:'',dataTop:"0"});												
							el =  $($tabPanel).find('.nodeMainArea').append(templateDefault);	
						}else{
							//This is the first Scenario being added to the DOM.
							templateDefault =_.template($('#node-scenario-template').html(), { cssName: "",top: '',tierArea:'',dataTop:"0"});												
							el =  $($tabPanel).find('.nodeMainArea').append(templateDefault);	
						}						
					}						
				}else{ 					
					var lastLeafAdded=$($tabPanel).find(".nodesenario3:last");
					//Expect the default leaf for scenario,there is no other leaf.So put a condition.
					if(lastLeafAdded.length == 0){
						//Check if this is arithmetic or otherwise
						if(leafObj.type == 'ARITHMETIC'){ 
							$template = _.template($('#node-scenario-validation-leaf-template').html(), { cssName: 'nodesenario2', top:'',position:'absolute',dataTop:''}); 
							el =  $(lastNodeScenarioInDOM).append($template);
							//Nasty way to find which leaf is added last 
							el = $(lastNodeScenarioInDOM).find(".nodesenario3:last");
						}else if(leafObj.type == 'CustomerProfile'){
							$template = _.template($('#node-scenario-validation-customerprofile-leaf-template').html(), { cssName: 'nodesenario2', top:'',position:'absolute',dataTop:''}); 
							el =  $(lastNodeScenarioInDOM).append($template);
							//Nasty way to find which leaf is added last 
							el = $(lastNodeScenarioInDOM).find(".nodesenario3:last");						
						}else{ 
							templateDefault = _.template($('#node-scenario-another-leaf-template').html(), { cssName: 'nodesenario2', top:'',position:'absolute',dataTop:''}); 
							el =  $(lastNodeScenarioInDOM).append(templateDefault);
							//Nasty way to find which leaf is added last 
							el = $(lastNodeScenarioInDOM).find(".nodesenario3:last");
						}

					}else{
						//Check if this is arithmetic or otherwise
						if(leafObj.type == 'ARITHMETIC'){ 
							$template = _.template($('#node-scenario-validation-leaf-template').html(), { cssName: 'nodesenario2', top:'',position:'absolute',dataTop:''}); 
							el =  $(lastNodeScenarioInDOM).append($template);
							//Nasty way to find which leaf is added last 
							el = $(lastNodeScenarioInDOM).find(".nodesenario3:last");
						}else if(leafObj.type == 'CustomerProfile'){
							$template = _.template($('#node-scenario-validation-customerprofile-leaf-template').html(), { cssName: 'nodesenario2', top:'',position:'absolute',dataTop:''}); 
							el =  $(lastNodeScenarioInDOM).append($template);
							//Nasty way to find which leaf is added last 
							el = $(lastNodeScenarioInDOM).find(".nodesenario3:last");	
						}else{ 
							//We have one leaf but not more than one..So Check the last Scenario added. 
							templateDefault = _.template($('#node-scenario-another-leaf-template').html(), { cssName: 'nodesenario2', top:'',position:'absolute',dataTop:''}); 
							el = $(lastNodeScenarioInDOM).append(templateDefault);
							//Nasty way to find which leaf is added last 
							el = $(lastNodeScenarioInDOM).find(".nodesenario3:last");
						} 
						}
				}
				//Populate Data for Each Component 
				populateDataForEachComponent(el,leafObj);
				
		    }
		   //Build Leaf END
		    /**
		     * Populate Data for each component being added.
		     */
		    function populateDataForEachComponent(latestDOM,leafObj){	
		    	/**
		    	 * if leaf object is arithmetic or Boolean
		    	 */
		    	if(leafObj.type == 'ARITHMETIC' || leafObj.type == 'CustomerProfile'){
		    		//alert("Arithmetic");
		    	}else{
		    		//console.log(leafObj);
			    	//For Partner Type START
					var unMarshalledDataHolder  = unMarshallToScenarioComponent(leafObj.data[0]);		    	
			    	$componentTobeUpdated = $(latestDOM).find('.nodeblue.position1');
			    	$componentTobeUpdated.data("dataHolder",unMarshalledDataHolder);	
			    	//console.log(unMarshalledDataHolder);
			    	unMarshalledDataHolder.setConditionsForPartnerType($componentTobeUpdated);	
			    	//For Partner Type END
			    	
			    	// For Partner ie the last component in a Leaf START
			    	var unMarshalledDataHolder  = unMarshallToScenarioComponent(leafObj.data[3]);		    	
			    	$componentTobeUpdated = $(latestDOM).find('.nodeblue.position9');
			    	$componentTobeUpdated.data("dataHolder",unMarshalledDataHolder);	
			    	//console.log(unMarshalledDataHolder);
			    	unMarshalledDataHolder.setConditionsForPartnerPosition9($componentTobeUpdated,unMarshalledDataHolder);			    
			    	// For Partner ie the last component in a Leaf END
			    	
			    	//For Qualifications Type START
			    	var unMarshalledDataHolder  = unMarshallToScenarioComponent(leafObj.data[1]);		    	
			    	$componentTobeUpdated = $(latestDOM).find('.nodeyellow.position2');
			    	$componentTobeUpdated.data("dataHolder",unMarshalledDataHolder);	
			    	//console.log(unMarshalledDataHolder);
			    	unMarshalledDataHolder.setConditionsForQualifications($componentTobeUpdated);			    	
			    	//For Qualifications Type END
			    	
			    	//For Country Type START
			    	var unMarshalledDataHolder  = unMarshallToScenarioComponent(leafObj.data[2]);		    	
			    	$componentTobeUpdated = $(latestDOM).find('.nodeblue.position3');
			    	$componentTobeUpdated.data("dataHolder",unMarshalledDataHolder);	
			    	//console.log(unMarshalledDataHolder);
			    	unMarshalledDataHolder.setConditionsForCountryType($componentTobeUpdated);			    	
			    	//For Country Type END		
		    	}
		    }
		    
		  //Step 5 Marshall to Scenario Component START
			function unMarshallToScenarioComponent(dataHolder){
				//console.log(dataHolder);
				var tempArray = new Array();
				if(dataHolder == undefined && dataHolder ==null){
					return tempArray;
				}
				//Iterate and type cast to Scenario Object
				for (var index = 0; index < dataHolder.length; index++) {
					var tempObj = dataHolder[index];			
					var scenarioObj = 
							new ScenarioComponents(tempObj.id,tempObj.name,tempObj.preCondition,tempObj.postCondition,tempObj.postConditionText,tempObj.preConditionText,tempObj.value,"");
					tempArray.push(scenarioObj);
				}
				//Returns Array of Scenario Component.
				return tempArray;
			}
			
			//Step 5 Marshall to Scenario Component END	
		    
		    
		    
		  //STEP 1 Adding tabs for each rule.Jquery UI tab functionality.Check documentation for any details. START
		    function buildTabs(ruleObj) {
		      var label = 'Business Rule ',
		        id = "tabs-" + tabCounter,
		        li = $( tabTemplate.replace( /#\{href\}/g, "#" + id ).replace( /#\{label\}/g, label ) ),
		        tabContentHtml = _.template($('#rule-tab-template').html());
		 
		      tabs.find( ".ui-tabs-nav" ).append( li );
		      //templateDefault =_.template($('#node-scenario-template').html(), { id:id,cssName: "",top: '0px',tierArea:''});
		      tabs.append( _.template($('#rule-tab-template').html(),{id:id}));  
		      //Show Default Scenario.
		      //tabs.find('.nodeMainArea').append(templateDefault);
		      //Refresh the tabs.
		      tabs.tabs( "refresh" );
		      tabCounter++;
		      //return tabs.find('.nodeMainArea');
		      return id;
		    }	   
		//STEP 1 Adding tabs for each rule.Jquery UI tab functionality.Check documentation for any details. END
		    
		 };})(jQuery);
	 	
});