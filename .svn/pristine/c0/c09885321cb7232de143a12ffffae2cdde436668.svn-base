	

		//Holds the scenrios where its being clicked
	 	var currentScenarioHandler = null ;

		/**
		 * Anything cosmetic related to Rule repositioning.
		 */
        (function () {
        	//height between leafs and scenarios
        	$heightBetweenScenario = 100;
        	$heightBetweenLeaf = 100;
        	$heightBetweenLeafForOperand = 150;
        	//Holds the Scenarios cumulative Height
        	$scenarioTotalHeight = 0;
        	//Holds the leafs Cumulative Height
        	$leafTotalHeight = 0;
        	
        	 /**
     	    * Popup when the user clicks any + sign.
     	    */ 
     	   var currentAddOperatorNode ; 
     	   var isOperandAlreadyExisting = false;
     	   
            $.fn.ruleNamespace = function() {
                this.reposition = parts.reposition;
                this.events = parts.events;
                this.showPopup = parts.showPopup;
                this.prepareJSON = parts.prepareJSON;
                this.showCodeView = parts.showCodeView;
                this.initializePageData = parts.initializePageData;
                this.initTabsRule = parts.initTabsRule;
                this.errorHandler = parts.errorHandler;
                this.customErrorHandler = parts.customErrorHandler;
                this.successHandler = parts.successHandler;
                this.saveAndValidateFields = parts.saveAndValidateFields;
                this.miscellaneousEvents = parts.miscellaneousEvents;  
                this.applyConditionsForEditRule = parts.applyConditionsForEditRule;
                return this;
            } 
            var parts = {
                reposition: function() {                	
                	//STEP 1 First traverse through the DOM and find the max height of each Leaf.
                	startTraversing();
                	//startTraversingDummy();
                },
                errorHandler: function(data) { 
                	handleError(data);
                },
                customErrorHandler: function(data) { 
                	handleCustomError(data);
                },
                successHandler: function(data,messageObj) { 
                	handleSuccess(data,messageObj);
                },
                events: function() { 
                	eventHandlers();
                },
                showPopup: function(message) { 
                	showFancyPopup(message);
                },
                prepareJSON : function(obj){
                	return buildJSON(this);
                },
                showCodeView : function(){
                	return showCodeView();
                },
                initializePageData : function(){
                	initializeJSONData();
                },
                initTabsRule : function(){
                	initTabs();
                },
                saveAndValidateFields : function(ruleFieldArray){
                	return fsSaveDataForRuleFields(ruleFieldArray);
                },
                miscellaneousEvents : function(){
                	//Draggable
    				$( ".designViewArea" ).draggable();
                	initMiscEvents();
                },
                applyConditionsForEditRule : function(ruleObj){
                	initApplyConditionsForEditRule(ruleObj);
                	//Draggable
    				$( ".designViewArea" ).draggable();
    				
                }
            };   
            /**
             * Function to show code view
             */
            function showCodeView(){
            	//Generate a Code version of the JSON data
            	var ruleObj = $('.designViewArea').ruleNamespace().prepareJSON();
            	
            	//Flatten the JSON to show in code view.
            	var codeViewFlatList = new Array();
            	
            	/**
            	 * First iterate the Scenario Object and get the preconnectors.
            	 */
            	for (var index = 0; index < ruleObj.length; index++) {
            		var preConnector= ruleObj.preConnector;
            		//If not null push the PreConnector.
            		if(preConnector != null){
            			var splitValue =preConnector.split(',');
            			$.each(splitValue, function(value) {
            				codeViewFlatList.push(key);
            			});
            		}
            		/*
            		 * For Leaf
            		 */            		
            		var leafList = ruleObj[index].leafCollection;
            		for (var index = 0; index < leafList.length; index++) {
            			var leafObj = leafList[index];           			
            			var splitValue =leafObj.preConnector.split(',');
            			$.each(splitValue, function(value) {
            				codeViewFlatList.push(value);
            			});
            			//console.log(leafObj);
            			//Now start doing for Data inside the leaf Collection.
            			$.each(leafObj.data, function(value) { 
            				codeViewFlatList.push(value);
            			});                		
            		}            		
				}
            	return codeViewFlatList;
            }           
            /*
             * START applying the conditions for Edit Rules.
             * Function to apply conditions for Edit Rule
             */
            function initApplyConditionsForEditRule(ruleObj){            	
            	//Start from the Top DOM.
            	//First get the ScenariosObj
            	var scenarioObject = ruleObj.data.scenarios;
            	/**
            	 * Iterate the Scenario Object.
            	 */            	
            	for (var index = 0; index < scenarioObject.length; index++) {
            		//Node Scenarios.
            		//Template for
        			$tierAreaTemplate = _.template($('#tier-border-scenario-edit').html(),{condition:scenarioObject[index].postConnector});
            		$currentNodeScenario = $('.designViewArea').find('.nodesenario1').eq(index);
            		$tierBorder = $($currentNodeScenario).next('.tierBorderScenario');
            		$($tierBorder).find('.tierBorderWrapper').remove();
            		$($tierBorder).append($tierAreaTemplate);     
            		applyConditionsForLeaf($currentNodeScenario,scenarioObject[index]);            		
            	}
            }   
            /**	
             * Apply condition for leaf.
             */
            function applyConditionsForLeaf(targetDOM,scenarioObject){
            	var leafCollection = scenarioObject.leafCollection;    
            	//Template for    			
            	for (var index = 0; index < leafCollection.length; index++) {
            		$tierAreaTemplate = _.template($('#tier-border-leaf-edit').html(),{condition:leafCollection[index].postConnector});
            		$tierBorderLeaf = $(targetDOM).find('.tierBorderLeaf').eq(index);
            		$($tierBorderLeaf).find('.tierBorderWrapper').remove();
            		$($tierBorderLeaf).append($tierAreaTemplate);    
            	}
            }            
            /**
             * Function to initialize miscellaneous events
             */
            function initMiscEvents(){
				//These are some exceptions 
				//DatePicker
				 $(".apasDatePick").datepicker();
				
				//Function for add Operand Events
				addOperandsEvents();
            }
            /**
             * Add Operand Events
             */
            function addOperandsEvents(){            	
			/**
			 * when the user clicks the moving plus sign connecting Scenarios
			 * http://stackoverflow.com/questions/9220141/how-to-position-a-popup-div-based-on-the-position-of-where-the-cursor-clicks
			 */
			$('.addOperand').live("click",function(e){		
				 var operandObj = $('.oparaterNode.operatorNodePlusSign');
				 $(operandObj).css('left',e.pageX);      // <<< use pageX and pageY
				 $(operandObj).css('top',e.pageY);
				 $(operandObj).css('position',"absolute");
				 $(operandObj).show();	
				currentAddOperatorNode = this;
			});			
			
        	/**
        	 * Popup when the user clicks anything in the components like Qualifications or other things.
        	 */
        	$('.applus').live("click",function(e){
        		 var operandObj = $('.oparaterNode.operatorNodeGeneric');
				 $(operandObj).css('left',e.pageX);      // <<< use pageX and pageY
				 $(operandObj).css('top',e.pageY);
				 $(operandObj).css('position',"absolute");
				 $(operandObj).show(); 	
        		currentAddOperatorNode = this;
        	});
        	/*
        	 * Wheen the user clicks the already existing operand.
        	 */
        	$('.operandValue').live("click",function(e){
        		var operandObj = $('.oparaterNode.operatorNodeGeneric');
				 $(operandObj).css('left',e.pageX);      // <<< use pageX and pageY
				 $(operandObj).css('top',e.pageY);
				 $(operandObj).css('position',"absolute");
				 $(operandObj).show(); 		 	
        		currentAddOperatorNode = this;
        		isOperandAlreadyExisting=true;
        	});        	
        	/**
        	 * Specific to plussign running around Scenarios.Not for other operands.
        	 */
        	$('.oparaterNode.operatorNodePlusSign a:not(.deleteICon,.opClose)').live("click",function(e){
        		var background = $(this).data("background");
        		var dataAlias = $(this).data("alias");
        		var operand = null;
        		$topNextElement = null;        		
        		if($(currentAddOperatorNode).hasClass('preOperand')){
        			operand = '<span class="sadd1 operandValue" data-alais="' + dataAlias + '" style="background-position:' + background + '"></span>';   
        		}else{
        			operand = '<span class="sadd1 operandValue" data-alais="' + dataAlias + '" style="background-position:' + background + '"></span>';
        		}    		
        		var el = $(operand).insertAfter(currentAddOperatorNode);         		
        		$('.oparaterNode.operatorNodePlusSign').hide();	
        		e.preventDefault();	
        	});	
        	/**
        	 * Add a event when the user clicks a operation in the 
        	 * ToolTip
        	 */
        	$('.oparaterNode.operatorNodeGeneric a:not(.deleteICon,.opClose)').live("click",function(e){        		
        		var background = $(this).data("background");
        		var dataAlias = $(this).data("alias");//alert( $(this).data("alias"));
        		//Now set the background depending on what operation the user has selected.
        		var operand = '<span class="bracket operandValue" data-alais="' + dataAlias + '" style="background-position:' + background + '"></span>';			
        		//Get the parent of the node and start updating the DOM data attribute object for updated Data.
        		$nodeParent = $(currentAddOperatorNode).parents('.node');
        		
        		//Always user prevent default for anchor
        		//Finally Hide the Operator Popup
        		$('.oparaterNode').hide();	
        		//Check if the dataHolder is empty or not	
        		$dataHolder = $($nodeParent).data('dataHolder');
        		//Sometimes there might not be a case where we click the + sign other than the components..It could be in Scneario connector 
        		//or in between the scenarios or leafs.
        		if($dataHolder != null && $dataHolder != "undefined"){
        			//If its existing Operand,update that operand..Otherwise add new one.		
        			if(isOperandAlreadyExisting){			
        				$(currentAddOperatorNode).replaceWith(operand);
        				//$(currentAddOperatorNode).remove();
        			}else{
        				$(currentAddOperatorNode).after(operand);
        				//TODO uncomment this if you want to show the operand in the Scenario node connection.
        			}
        			$dataHolder.updateRowsAfterAddingOperands($nodeParent);
        		}else{
        			$(currentAddOperatorNode).css("background-position",background);
        			$(currentAddOperatorNode).attr("data-alais",dataAlias);
        		}
        		
        		//Prevent propagation.		
        		e.preventDefault();	
        	});	
        	
        	/**
        	 * When the user deletes a specific Operand
        	 */
        	$('.deleteICon').live("click",function(e){
        		//Remove the Operand from the DOM 
        		$('.oparaterNode').hide();	
        		isOperandAlreadyExisting = false;
        		//Prod issue.Now update the dataHolder since something is removed.
        		$nodeParent = $(currentAddOperatorNode).parents('.node');
        		//get the Data Holder
        		$dataHolder = $($nodeParent).data('dataHolder');        		
        		//Only for Components and not for other operators in scenario or Leaf connectors.
        		if($dataHolder != null && $dataHolder != "undefined"){        			
        			$(currentAddOperatorNode).remove();
        			//Update Rows
            		$dataHolder.updateRowsAfterAddingOperands($nodeParent);
        		}        		
        		e.preventDefault();		
        	});
        	/**
        	 * When the user does mouse over on the Tier border which connects
        	 * two scenarios.
        	 */	    
        	$('.tierBorder').live("mousemove",function(e) {
                var clientXRel = e.pageX- $(this).offset().left;
                var clientYRel = e.pageY - $(this).offset().top;      
        		  $('.tierBorderadddef').css('left', 9+'px');
        		  $('.tierBorderadddef').css('top', clientYRel-10+'px');
        		  $('.tierBorderadddef').show();
                });
                        
                $('.tierBorder').live("mouseleave",function() {
                     $('.tierBorderadddef').hide();
                });
            }
            /**
             * Save and validate Rules Field
             */
            function fsSaveDataForRuleFields(fields) {	
            	//Holds the error objectop
            	var ruleError = new Array();	
            	ruleError.clear();
            	var data=[];	
                $.each(fields, function(key, value) {
                    var temparray = [];
                    var fieldvalue = value.field;
                    var fieldName = value.name;
                    var dataType = value.datatype;
                    var errorMessage = value.errorMessage;
                    var requiredRuleCreate = value.requiredForCreate;
                    var requiredRuleEdit = value.requiredForEdit;
                   
                	if (dataType == "text") {
                		var fieldVal = $("input[name=" + fieldvalue + "]").val();
                        data[fieldName] = fieldVal;                       
                        //Set Error Message
                        if(requiredRuleCreate){
                        	if(fieldVal == null || fieldVal == "undefined" || fieldVal == '' || (fieldVal.length == 0 )){
                            	ruleError.push(errorMessage);
                            }
                        }            
                	}       
                    if ($("select[name=" + fieldvalue + "]").val()) {
                        data[fieldName] = $("select[name=" + fieldvalue + "]").val();
                    }       
                    if(dataType == "checkbox" || dataType == "option"){
            	        $.each($("input[name='" + fieldvalue + "[]']:checked"), function() {            	
            	            temparray.push($(this).val());	            
            	        });       
            	        data[fieldName] = temparray;
            	        //Set Error Message
            	        if(requiredRuleCreate){
            		        if(temparray == null || temparray == "undefined" || temparray == '' || temparray.length == 0 ){
            	            	ruleError.push(errorMessage);
            	            }
            	        }
                    }
                });
                
                //Check if any of the Applicable or Billing or Install countries are checked or not.
                if(data['applicableCountries'].length == 0  &&  data['billingCountries'].length == 0 && data['installCountries'].length == 0){
                	ruleError.push("Select atleast  one value from either Applicable Countries or Billing Countries or Install Countries ");
                }
                
                
                
                
                //Push the data
                var returnVal = new Array();
                returnVal.error = ruleError;
                returnVal.fieldData = data;
                
                return returnVal;    
            }
            
            /**
             * Function to initialize DOM
             */
            function initializeJSONData(){
            	//Initialize all accordions here
            	acccordionInitialize();  
            	countryListInitialize();
            }
            /**
             * Initialize country list
             */
            function countryListInitialize(){
            	 $('.billingPop').append(_.template($('#billingCountries').html(),{countryData:theaterList}));
				 $('.applicablePop').append(_.template($('#applicableCountries').html(),{countryData:theaterList}));
				 $('.installPop').append(_.template($('#installCountries').html(),{countryData:theaterList}));
            }
            /**
             * Initialize Tabs
             */
            function initTabs(){
            	var	  tabTemplate = "<li><a href='#{href}'>#{label}</a> <span class='ui-icon ui-icon-close'>Remove Tab</span></li>",
                tabCounter = 1;
              
              //Now show the tab.
              var tabs = $( "#tabs" ).tabs();
              //First add a default tab
              addTab();
              //Open the first tab
              $("#tabs").tabs({selected: 0});
              
              // actual addTab function: adds new tab using the input from the form above
              function addTab() {
                var label = 'Business Rule '  + tabCounter,
                  id = "tabs-" + tabCounter,
                  li = $( tabTemplate.replace( /#\{href\}/g, "#" + id ).replace( /#\{label\}/g, label ) ),
                  tabContentHtml = _.template($('#rule-tab-template').html());
           
                tabs.find( ".ui-tabs-nav" ).append( li );
                templateDefault =_.template($('#node-scenario-template').html(), { id:id,cssName: '' ,top: '0px',tierArea:'',dataTop:''});
                tabs.append( _.template($('#rule-tab-template').html(),{id:id}));  
                //Show Default Scenario.
                tabs.find('.nodeMainArea').append(templateDefault);
                //Refresh the tabs.
                tabs.tabs( "refresh" );
                tabCounter++;
              }
           
              // close icon: removing the tab on click
              $( "#tabs span.ui-icon-close" ).live( "click", function() {
                var panelId = $( this ).closest( "li" ).remove().attr( "aria-controls" );
                $( "#" + panelId ).remove();
                tabs.tabs( "refresh" );
                //Decrement the tab 
                tabCounter =  tabCounter-1;
              });
            //Adding more tabs
          	$("#addMoretab").live("click",function(){      
          		addTab();
          	});
            }
            
            /**
             * initialize Accordion values
             */
            function acccordionInitialize(){
            		// For Partner Type Accordion
					partnerTypeAccordion = [{ "value" : "DISTRIBUTOR" ,  "label" : "DISTRIBUTOR", "classification":"Partner Type", "id" :"302" },
					{ "value" : "VAR" ,  "label" : "VAR", "classification":"Partner Type", "id" :"303" },
					{ "value" : "DMR" ,  "label" : "DMR", "classification":"Partner Type", "id" :"585" },
					{ "value" : "SP" ,  "label" : "SP", "classification":"Partner Type", "id" :"306" }, 
					{ "value" : "DVAR" ,  "label" : "DVAR", "classification":"Partner Type", "id" :"304" }];					
					 $('.partnervalues').append(_.template($('#partnerType_accordion_template').html(), { data: partnerTypeAccordion}));
					 //For Qualifications Accordion
					 $('.qualificationsAccordion').append(_.template($('#qualifications_accordion_template').html(), { data: qualificationAccordionType}));  
					 //For Country Type accordion
					 $('.extraValidationAccordion').append(_.template($('#extraValidations_accordion_template').html()));
            }
            
            
            /**
             * First start from the top Node ie designViewArea class
             * Traverse through the DOM and find each Scenario and its leaf.
             * Iterate and get the data attribute from it.
             * @targetDOM will be the tab from which you want to pick the 
             * data from.ie tabs-1,tabs-2,tabs-3
             */ 
            
            function buildJSON(obj){
            	 //Holds all the scenario data
                //First we collect the values in array and convert it to JSON.
                var scenarioJSONObject = null;
                //Holds the Scenario Object
            	scenarioJSONObject = new Array();        	
        		/**
        		 * We know 'this' represents the target DOM.Please be careful while changing the functions here.
        		 * Care should be taken to make sure to test lot of scenario.So better stay away :)
        		 */
            	$firstScenarioInDOM = $(obj).find('.nodesenario1:first');	
            	/**
            	 * Iterate through each siblings of the scenario and go levels deeper.
            	 * Example below.
            	 * Scenario1 ->leaf 1,leaf 2 ,leaf 3
            	 * Scenario 2 -> Leaf 1,leaf 2, leaf 3
            	 */
            	//Include the andSelf.This will include the current Scenario node into the iteration.
            	$($firstScenarioInDOM).siblings('.nodesenario1').andSelf().each(function(){
            		//This is where we store all the data related to the component.
            		$scenarioComponentsObj = $(this).buildScenarioLeafs(); 
            		$connectors = buildScenarioConnectors(this);            		
            		//Now create a Scenario object which will hold the array of components for each row.
            		var sceObj = new Object();
            		sceObj.scenarioName = "Scenario";
            		//Ideally this should also be an array
            		sceObj.leafCollection = $scenarioComponentsObj;  
            		//This value represents the operation between 2 scenarios..
            		//If the user adds any other operation ,it will be stored here 
            		//TODO this is hardcoded as of now.
            		sceObj.postConnector=$connectors;
            		/**
            		 * Push the scneario object to Scenario Array
            		 */
            		scenarioJSONObject.push(sceObj);
            		
            	});
            	//Build Scenario and Leaf Preconnectors and PostConnectors.
            	//Scenario leaf start Bracket and End Bracket.
            	
            	scenarioJSONObject = buildScenarioPreConnectors(scenarioJSONObject);
            	//console.log(scenarioJSONObject);
            	
            	return scenarioJSONObject;
            }
            /**
             * Build Scenario PreConnectors.
             */
            function buildScenarioPreConnectors(ruleObj){            	
            	/**
            	 * Iterate through the Scenario Object and find the First Start Expression and 
            	 * hardcode the End Expression
            	 */
            	$len = ruleObj.length;
            	//Get Scenario Start Expression.
            	var scenarioPreConnect = $('.scenarioStartExpression').data('alais');
            	//Set this for First Condition.
            	if(ruleObj != null){
            		ruleObj[0].preConnector = scenarioPreConnect;
            		//Right now Hardcoded. TODO Hardcoded value removed as per Ashwin's request.
            		//ruleObj[$len-1].postConnector ="CLOSE_YELLOW";
            	}            	
            	//Start finding the Start and End Expression for Leafs.
            	return ruleObj;
            }
            /**
             * All Event Handlers
             */
            function eventHandlers(){
	           	//Event for closing popups
            	closeButtons();
            	
            	//Design Area 
            	designAreaEvents();
            	//Accordion click events
            	accordionClickEvents();
            	//Zoom in and Zoom out events
            	zoomEvents();
            	//scenario and leaf adding events
            	scenarioLeafEvents();
            	//Applicable countries events
            	preconditionEvents();
            	//Edit and Save COmponents events
            	changeSelectionEvents();
            	//Select all for country chexkbozes
            	selectCountryCheckboxes();
            	//When the user clicks the Select all in each region
            	selectContinentLevelCheckbox();
            	
            	initFancyBox();            	
            }            
	         /**
	          * Function to build Scenario Connectors.
	          */
	       	 function buildScenarioConnectors(targetDOM){
	       		 var connector ="";
	       		 //Find the tierBorder next to Scenario 1
	       		$tierBorder = $(targetDOM).next('.tierBorderScenario');
	       		$($tierBorder).find('.operandValue').each(function(){
           			connector += $(this).data('alais') + ",";
           		});
	       		return connector;
	       	 }  
			/*
			 * Function to trigger fancyBox even
			 * using this for OK button on cont level popup
			 */
		    function initFancyBox(){
		    	

				 /**
				  * First load the Top block for Rules.
				  * The reason the top block is moved to templates is that 
				  * for each tab added ,the top bar is going to be unique
				  * and values are specific to each business rule.
				  */
				 $('.ruleTopBar').append(_.template($('#ruleTopBlock').html()));		 
				 
				//Now load the Pop up templates for applicable ,billing and install countries.
				/* $('.billingPop').append(_.template($('#billingCountries').html()));
				 $('.applicablePop').append(_.template($('#applicableCountries').html()));
				 $('.installPop').append(_.template($('#installCountries').html()));*/
				 
				 $(".billingCountries").fancybox();
				 $(".appCountries").fancybox();
				 $(".installCountries").fancybox();	
				 //For Error handling.
				 $(".errorPop").fancybox();
				 $(".genericMessage").fancybox();		    	
		    	
	   			 
				 // trigger fancy-box (close popup) event on click OK.
				 $('.fancyOK').live("click",function(){
	   				 	$("#fancybox-close").trigger("click");
	   			 });	 		    	
			}
         
            
            //Function when the user selects all in the popup.
	   		 function selectCountryCheckboxes(){
	   			$("input[name='applyFilterForApplicable[]'],input[name='applyFilterForBilling[]'],input[name='applyFilterForInstall[]']").change(function(){
	   				//Holds the user selected value when he selects option button
	   				 var userSelectionOption = $(this).data('value');
		   			 var parentClass= $(this).data('parentclass');		   			 
		   			 //First find out what the user has selected.If Select all,check all,
		   			 //If EEA,use the eeaCountryList,iterate and select the values.
		   			 //If non-EEA,then first select all and then deselect the EEA list.
		   			 
		   			 //First case: Select ALL.
		   			switch (userSelectionOption) {
		   				case 'ALL': 
		   					$("." + parentClass).find(':checkbox').attr('checked', true);	
		   					break;
		   				case 'EEA':
		   					//First unselect all.
		   					$("." + parentClass).find(':checkbox').attr('checked', false);	
		   					$.each(eeaCountryList,function(key,value){
		   						
		   						$("." + parentClass).find('input[value="' + value + '"]').attr('checked', true);
		   					});
		   					break;
		   				case 'NON_EEA':		   						
		   					//Unselect all 
		   					$("." + parentClass).find(':checkbox').attr('checked', false);	
		   					//Select All		   					
		   					$("." + parentClass).find(':checkbox:not(".selectContLevel")').attr('checked', true);
		   					//Then unselect the EEA values.
		   					$.each(eeaCountryList,function(key,value){
		   						
		   						$("." + parentClass).find('input[value="' + value + '"]').attr('checked', false);
		   					});
		   					break;
		   			}
	   			});	   			 
	   		 }
	   		 //Function when the user selects all in the popup.
	   		 function selectContinentLevelCheckbox(){
	   			 $('.selectContLevel').live("click",function(){
	   				$topNode = $(this).parents('.single-column');
		   			 if ($(this).is(':checked')){				 
		   				 //First find the parent Class				 			 
		   				$($topNode).find(':checkbox').attr('checked', this.checked);
		   			 }else{
		   				$($topNode).find(':checkbox').attr('checked', this.checked);
		   			 }	
	   			 });
	   					 
	   		 }
            /**
             * Change Selection events
             */
            function changeSelectionEvents(){
            	$(".node").live('mouseover',function(){   
            		$(this).find('.nodeEditBoxEdit').fadeIn();
            		 $(this).find('.nodeEditBoxDelete').fadeIn();            		 
            	});
            	$(".node").live('mouseleave',function(){       
            	 $('.nodeEditBox').fadeOut();
            	$(this).find('.nodeEditBoxEdit').fadeOut();
            	$(this).find('.nodeEditBoxDelete').fadeOut();
            	});  
            }
            /**
             * Events related to PreConditions
             */
            function preconditionEvents(){
            	 //country popup
    			$(".country_title").live("click",function(){	
    				$(this).parent().find(".description_box").slideToggle();
    				$(this).toggleClass("expand-box");
    				$(this).parent().siblings().find(".description_box").slideUp(); //close relevant div
    				$(this).parent().siblings().find(".country_title").removeClass("expand-box"); //remove relevant div class
    			});
            }
            /*
             * Scenario and Leaf adding events
             */
            function scenarioLeafEvents(){
            	//adding new Node events
            	addNewNodeEvents();
            	//Adding new leaf boolean type.
            	addNewLeafEvents();
            	//When user clicks accordion for partnerType
            	partnerTypeClickable();
            	//When the user clicks Qualifications
            	qualificaionsTypeClickable();
            	//When the user clicks Country type
            	countryTypeClickable();
            	//When the user clicks Extra validations
            	extraValidationsClickable();
            }
            /**
             * When the user clicks Extra Validations
             */
            function extraValidationsClickable(){
            	 /**
            	    * For Validation flow.
            	    */
            	   $('.addvalidation').live("click",function(event) {
            		   var text = $(this).data('name');	  
            		   $value = $(this).data('value');
            		   $id = $(this).data('id');	
            		   $classification = $(this).data('classification');
            		   isScenarioSelected(scenarioSelected,event);
            		   $componentSelected = $(scenarioSelected).children('.nodegreen.position1');	   
            		   /**
            			 * First get the data associated with this node from the node's
            			 * HTML5 attribute.Note everytime you add a value,we create a javascript object
            			 * and associate it with this node.This could avoid circular reference to 
            			 * the object.
            			 */
            			var dataHolder = $componentSelected.data("dataHolder");				
            			/**
            			 * For country type we should allow only one value.
            			 * Either Billing or Install.So call a method that 
            			 * does the job of adding only one value and remove the other one.
            			 */
            			 if(rule_IgnoreDuplicateForComponentsCountryType(dataHolder,$componentSelected,$id)){
            				 event.stopImmediatePropagation();
            				 return true;
            			 }		
            			 //Get the dataHolder again from the DOM 
            			dataHolder = $componentSelected.data("dataHolder");	
            			
            			//Clear the array as we can add only one value for this one.
            			dataHolder.clear();
            			//Create a new scenario components.
            			var scenarioCompObj = new ScenarioComponents('',text,'','','','',$value,$classification);
            			//Push the data into the DataHolder array to be referenced later.
            	   	 	dataHolder.push(scenarioCompObj);	    	 	
            	   	 	/**
            	   	 	 * Once the data is pushed into the array,now its time to relax
            	   	 	 * and not think about the conditions being applied.
            	   	 	 * Go and have a cup of coffee and roam around the campus :)
            	   	 	 * Well,ofcourse after you call the below method.
            	   	 	 * 
            	   	 	 * The conditions that need to be applied for components are 
            	   	 	 * moved to the Array prototype and Scenario components.This
            	   	 	 * will help us seperate the components rendering logic away 
            	   	 	 * from the main code. I am saving developers ass :)
            	   	 	 */
            		    dataHolder.setConditionsForExtraValidations($componentSelected);	
            		    $('.body').ruleNamespace().reposition();
            		}); 
            	        		 
            }
            /**
             * When the user clicks country type
             */
            function countryTypeClickable(){
            	 $('.country_li').live("click",function(event) {
            		   var text = $(this).data('name');
            		   $id = $(this).data('id');	
            		   $value = $(this).data('value');
            		   $classification = $(this).data('classification');
            		   isScenarioSelected(scenarioSelected,event);
            		   
            		   $componentSelected = $(scenarioSelected).children('.nodeblue.position3');	   
            		   /**
            			 * First get the data associated with this node from the node's
            			 * HTML5 attribute.Note everytime you add a value,we create a javascript object
            			 * and associate it with this node.This could avoid circular reference to 
            			 * the object.
            			 */
            			var dataHolder = $componentSelected.data("dataHolder");				
            			/**
            			 * For country type we should allow only one value.
            			 * Either Billing or Install.So call a method that 
            			 * does the job of adding only one value and remove the other one.
            			 */
            			 if(rule_IgnoreDuplicateForComponentsCountryType(dataHolder,$componentSelected,$id)){
            				 event.stopImmediatePropagation();
            				 return true;
            			 }		
            			 //Get the dataHolder again from the DOM 
            			dataHolder = $componentSelected.data("dataHolder");		
            			//Clear the array as we can add only one value for this one.
            			dataHolder.clear();
            			//Create a new scenario components.
            			var scenarioCompObj = new ScenarioComponents($id,text,'','','','',$value,$classification);
            			//Push the data into the DataHolder array to be referenced later.
            	   	 	dataHolder.push(scenarioCompObj);	    	 	
            	   	 	/**
            	   	 	 * Once the data is pushed into the array,now its time to relax
            	   	 	 * and not think about the conditions being applied.
            	   	 	 * Go and have a cup of coffee and roam around the campus :)
            	   	 	 * Well,ofcourse after you call the below method.
            	   	 	 * 
            	   	 	 * The conditions that need to be applied for components are 
            	   	 	 * moved to the Array prototype and Scenario components.This
            	   	 	 * will help us seperate the components rendering logic away 
            	   	 	 * from the main code. I am saving developers ass :)
            	   	 	 */
            		    dataHolder.setConditionsForCountryType($componentSelected);	  
            		    $('.body').ruleNamespace().reposition();
            		}); 
            }
            /**
             * When the user clicks Qualifications
             */
            function qualificaionsTypeClickable(){
            	 $('.certif_li').live("click",function(event) {
          		   isScenarioSelected(scenarioSelected,event);
          		   var text = $(this).data('name');
             		   $id = $(this).data('id');	 
             		   $value = $(this).data('value');
             		   $classification = $(this).data('classification');
          		   if($(this).hasClass('cert'))
          		   var text = 'Cert: ';           
          		   else if($(this).hasClass('spec'))
          		   var text = 'Spec: ';           
          		   else
          		       var text = 'Auth: ';    	   
          		   text += $(this).text();  
          		   $componentSelected = $(scenarioSelected).children('.nodeyellow.position2');
          		   /**
          			 * First get the data associated with this node from the node's
          			 * HTML5 attribute.Note everytime you add a value,we create a javascript object
          			 * and associate it with this node.This could avoid circular reference to 
          			 * the object.
          			 */
          			var dataHolder = $componentSelected.data("dataHolder");				
          			/**
          			 * Once we get the object,now push the latest object into the dataHandler.
          			 * At this point check if the object id is already available using the id we got while
          			 * clicking the partner accordion.If available,stop the propagation here itself
          			 */
          			 if(okToAllowDuplicates(dataHolder,$componentSelected,$id)){
          				 event.stopImmediatePropagation();
          				 return true;
          			 }
          			 //Get the dataHolder again from the DOM 
          			dataHolder = $componentSelected.data("dataHolder");
          			
          			//Create a new scenario components.
          			var scenarioCompObj = new ScenarioComponents($id,text,'','','','',$value,$classification);
          			//Push the data into the DataHolder array to be referenced later.
          	   	 	dataHolder.push(scenarioCompObj);	    	 	
          	   	 	/**
          	   	 	 * Once the data is pushed into the array,now its time to relax
          	   	 	 * and not think about the conditions being applied.
          	   	 	 * Go and have a cup of coffee and roam around the campus :)
          	   	 	 * Well,ofcourse after you call the below method.
          	   	 	 * 
          	   	 	 * The conditions that need to be applied for components are 
          	   	 	 * moved to the Array prototype and Scenario components.This
          	   	 	 * will help us seperate the components rendering logic away 
          	   	 	 * from the main code. I am saving developers ass :)
          	   	 	 */
          		    dataHolder.setConditionsForQualifications($componentSelected);	
          		    //Call the ruleNamespace reposition function.
          		    $('.body').ruleNamespace().reposition();
          	}); 
            }
            /**
             * When user clicks partner Type
             */
            function partnerTypeClickable(){
            	 $('.partner_li').live("click",function(event) {
         	    	isScenarioSelected(scenarioSelected,event);
         	    		var text = $(this).data('name');
         	    		$id = $(this).data('id');	 
         	    		$value = $(this).data('value');
         	     		$classification = $(this).data('classification');
         				//Get the scenario selected and then add the options according to what is selected.
         				$componentSelected = $(scenarioSelected).children('.nodeblue.position1');
         				/**
         				 * First get the data associated with this node from the node's
         				 * HTML5 attribute.Note everytime you add a value,we create a javascript object
         				 * and associate it with this node.This could avoid circular reference to 
         				 * the object.
         				 */
         				var dataHolder = $componentSelected.data("dataHolder");				
         				/**
         				 * Once we get the object,now push the latest object into the dataHandler.
         				 * At this point check if the object id is already available using the id we got while
         				 * clicking the partner accordion.If available,stop the propagation here itself
         				 */
         				 if(rule_IgnoreDuplicatesForComponents(dataHolder,$componentSelected,$id)){
         					 event.stopImmediatePropagation();
         					 return true;
         				 }
         				 //Get the dataHolder again from the DOM 
         				dataHolder = $componentSelected.data("dataHolder");
         				
         				//Create a new scenario components.
         				var scenarioCompObj = new ScenarioComponents($id,text,'','','','',$value,$classification);
         				//Push the data into the DataHolder array to be referenced later.
         	    	 	dataHolder.push(scenarioCompObj);	    	 	
         	    	 	/**
         	    	 	 * Once the data is pushed into the array,now its time to relax
         	    	 	 * and not think about the conditions being applied.
         	    	 	 * Go and have a cup of coffee and roam around the campus :)
         	    	 	 * Well,ofcourse after you call the below method.
         	    	 	 * 
         	    	 	 * The conditions that need to be applied for components are 
         	    	 	 * moved to the Array prototype and Scenario components.This
         	    	 	 * will help us seperate the components rendering logic away 
         	    	 	 * from the main code. I am saving developers ass :)
         	    	 	 */	  
         	    	 	
         		    	dataHolder.setConditionsForPartnerType($componentSelected);
         		    	//alert(JSON.stringify(dataHolder) );
         		    	//For Partner Type ,when the user add a Distributor,then the Partner components should also be updated.
         		    	//So update the Partner Component in the scenario.
         		    	//Pass the partner TYpe object to find out if there are any conditions apply,we do manipulate.
         		    	//Partner Type object should be immutable in this case.	
         		    	updatePartnerInScenario(dataHolder);
         		    	$('.body').ruleNamespace().reposition();
         	   	});
            }
            /*
    	     * Updates the partner component in Scenario.Thats the last blue one you see in a scenario
    	     */
    	    function updatePartnerInScenario(partnerTypeDataHolder){
    	    	//First get the component 
    	    	$componentSelected = $(scenarioSelected).children('.nodeblue.position9');
    	    	
    	    	/**
    			 * First get the data associated with this node from the node's
    			 * HTML5 attribute.Note everytime you add a value,we create a javascript object
    			 * and associate it with this node.This could avoid circular reference to 
    			 * the object.
    			 */
    			var dataHolder = $componentSelected.data("dataHolder");	
    			//Check if the Dataholder is already available.
    			if(dataHolder !== undefined && dataHolder.length !== null && dataHolder.length > 0){
    					//Dont do anything here buddy.
       		 	}else{    			
        			//Create a new dataHolder now for line items to be added.
        			var dataHolder = new Array();       			
        			//Associate the data holder to the DOM
        			$($componentSelected).data("dataHolder",dataHolder);
        		}
    			dataHolder.setConditionsForPartnerPosition9($componentSelected,partnerTypeDataHolder);	
    			
    	    }
            /**
             * Add new Node
             */
            function addNewNodeEvents(){
            	$(".addNewNode").live("click",function(e){
					var operandObj = $('.twooparaterNode1');
					 $(operandObj).css('left',e.pageX);      // <<< use pageX and pageY
					 $(operandObj).css('top',e.pageY);
					 $(operandObj).css('position',"absolute");
					 $(operandObj).slideDown();
	            	 currentScenarioHandler = this;
            	});
            }
            /**
             * Adding New leaf Events
             */
            function addNewLeafEvents(){
            	 //ReWritten by krenkara@cisco.com Jan 10,2013
                $('.bt_ptype').live('click', function() {        	
               	 $('.twooparaterNode1').hide();
               	 $('.sadd0').delay(500).fadeIn(500);  
               	 //We know which scenario the user has clicked.Accordingly insert the new node after this one.
               	 //Before that calculate the top height and adjust the rest of the elements below this component accordingly
               	 $scenarioTopLevel  = $(currentScenarioHandler).parent().parent('.nodesenario1');
               	 $scenarioTopLevel1 =  $($scenarioTopLevel).children('.position9');
               	 //$($scenarioTopLevel).children(".nodesenario1:last")
               	
               	 $leafToBeInserted = $($scenarioTopLevel).children('.nodesenario3:last');
               	 //Which means no leaf is added to the main scenario till now other than the default one.
               	 if($leafToBeInserted.length == 0){
               		 //alert("No leaf yet");
               		//Get the height of the previous component and set the relative top and position
                   	 $previousNodeHeight = $($scenarioTopLevel1).position().top;
                   	// alert($previousNodeHeight);
                   	 $acutalHeight = $previousNodeHeight + 100;
                   	//Get the template we want to insert to
                   	 $template = _.template($('#node-scenario-another-leaf-template').html(), { cssName: 'nodesenario2', top: "",position:'absolute',dataTop:""});
                   	 $($scenarioTopLevel1).after($template);
                	 }else{
                		 //This means already a leaf is added to this scenario other than the default ones
                		//Get the height of the previous component and set the relative top and position
                   	 $previousNodeHeight = $($leafToBeInserted).position().top;            	 
                   	 $acutalHeight = $previousNodeHeight + 100;
                   	// alert($acutalHeight);
                   	//Get the template we want to insert to
                   	 $template = _.template($('#node-scenario-another-leaf-template').html(), { cssName: 'nodesenario2', top: "",position:'absolute',dataTop:""});
                   	 $($leafToBeInserted).after($template);
                   	 //Before we insert the leaf,we need to make sure the leaf and scenario does not overlap.
                   	 //repositionOVerlappingElements($scenarioTopLevel);       
                	 }
               	 $("body").ruleNamespace().reposition();
                }); 
                	/**
                	 * When the user clicks the validation leaf.
                	 */
                    $('.bt_valid').live('click', function() {
                   	 $('.twooparaterNode1').hide();
                   	 $('.sadd0').delay(500).fadeIn(500);  
                   	 //We know which scenario the user has clicked.Accordingly insert the new node after this one.
                   	 //Before that calculate the top height and adjust the rest of the elements below this component accordingly
                   	 $scenarioTopLevel  = $(currentScenarioHandler).parent().parent('.nodesenario1');
                   	 $scenarioTopLevel1 =  $($scenarioTopLevel).children('.position9');
                   	 //$($scenarioTopLevel).children(".nodesenario1:last")
                   	
                   	 $leafToBeInserted = $($scenarioTopLevel).children('.nodesenario3:last');
                   	 //Which means no leaf is added to the main scenario till now other than the default one.
                   	 if($leafToBeInserted.length == 0){
                   		 //alert("No leaf yet");
                   		//Get the height of the previous component and set the relative top and position
                       	 $previousNodeHeight = $($scenarioTopLevel1).position().top;
                       	// alert($previousNodeHeight);
                       	 $acutalHeight = $previousNodeHeight + 100;
                       	//Get the template we want to insert to
                       	 $template = _.template($('#node-scenario-validation-leaf-template').html(), { cssName: 'nodesenario2', top:""  + 'px',position:'absolute'});
                       	 $($scenarioTopLevel1).after($template);
                    	 }else{
                    		 //This means already a leaf is added to this scenario other than the default ones
                    		//Get the height of the previous component and set the relative top and position
                       	 $previousNodeHeight = $($leafToBeInserted).position().top;            	 
                       	 $acutalHeight = $previousNodeHeight + 100;
                       	// alert($acutalHeight);
                       	//Get the template we want to insert to
                       	 $template = _.template($('#node-scenario-validation-leaf-template').html(), { cssName: 'nodesenario2', top:""  + 'px',position:'absolute'});
                       	 $($leafToBeInserted).after($template);
                       	 //Before we insert the leaf,we need to make sure the leaf and scenario does not overlap.
                       	 $("body").ruleNamespace().reposition();  
                    	 }        	
                    });  
            }
            
            /**
             * Zoom events
             */
            function zoomEvents(){
            	var cur_zoom;
                var des_zoom = 1;
                var code_zoom = 1;
                var split_zoom = 1;
                   
                $('.zoomin').live("click",function() {
                    
                    if($('.visibleArea').hasClass('designViewArea'))
                        {
                            if(cur_zoom<=2.4) 
                            des_zoom = des_zoom + 0.2;
                            cur_zoom = des_zoom;
                            
                        }
                        
                        else if($('.visibleArea').hasClass('codeViewArea'))
                        {
                            if(cur_zoom<=2.4) 
                            code_zoom = code_zoom + 0.2;
                            cur_zoom = code_zoom;
                        }
                        
                         else if($('.visibleArea').hasClass('splitViewArea'))
                        {
                            if(cur_zoom<=2.4) 
                            split_zoom = split_zoom + 0.2;
                            cur_zoom = split_zoom;  
                        }
                        
                    
                  
                	$('.visibleArea').css('zoom', cur_zoom);
        			 //$('.visibleArea').show('scale', { percent: 100, direction: 'vertical'}, 1000 )
                  $('.visibleArea').css('-moz-transform', 'scale('+cur_zoom+')');
        			$('.visibleArea').css('-webkit-transform', 'scale('+cur_zoom+')');
                    
                    $('.zoomValue').text(parseInt(cur_zoom*100)+'%');
                });
                $('.zoomout').live("click",function() {
                  
                     if($('.visibleArea').hasClass('designViewArea'))
                        {
                             if(cur_zoom>=0.4) 
                            des_zoom = des_zoom - 0.2;
                            cur_zoom = des_zoom;
                             
                        }
                        
                        else if($('.visibleArea').hasClass('codeViewArea'))
                        {
                             if(cur_zoom>=0.4) 
                            code_zoom = code_zoom - 0.2;
                            cur_zoom = code_zoom;
                        
                        }
                        
                         else if($('.visibleArea').hasClass('splitViewArea'))
                        {
                             if(cur_zoom>=0.4)
                            split_zoom = split_zoom - 0.2;
                            cur_zoom = split_zoom;
                             
                        }                       
                    $('.visibleArea').css('zoom', cur_zoom);
                    $('.visibleArea').css('-moz-transform', 'scale('+cur_zoom+')');
                    $('.visibleArea').css('-webkit-transform', 'scale('+cur_zoom+')');
                    $('.zoomValue').text(parseInt(cur_zoom*100)+'%');
                });	
                
				$('.splitViewScroll1').slimScroll({
				  height: '300px',
							  alwaysVisible: true
						}); 
				$('.splitViewScroll2').slimScroll({
				  height: '150px',
					  alwaysVisible: true
				}); 
            }
            
            /*
             * Accordion click events
             */
            function accordionClickEvents(){
                //left sidebar
            	$(".singleBox h6").click(function(){	
            		$(this).parent().find(".subItems").slideToggle();
            		$(this).parent().siblings().find(".subItems").slideUp();
            		$(this).parent().find(".closearrow").addClass('closenav');
            		$(this).parent().siblings().find(".closearrow").removeClass('closenav');
            	});	
            	
            	$(".subchildTitle").click(function(){	
            		$(this).parent().find(".listValues").slideToggle();
            		$(this).parent().siblings().find(".listValues").slideUp();
            		
            		// scroll function			
            		$('.leftSubMenuScroll').slimScroll({
            			  height: '210px'
            		});
            		$(this).parent().find(".certifIcon").addClass('subchildselect');
            		$(this).parent().find(".specIcon ").addClass('subchildselect');
            		$(this).parent().find(".authrIcon ").addClass('subchildselect');
            		//$(this).parent().siblings().find(".closearrow").removeClass('closenav');
            	});	
            	
            	$(".certifIcon").click(function(){       
            	    $(this).addClass('certifIconselect');
            		$('.specIcon').removeClass('specIconselect');
            		$('.authrIcon').removeClass('authrIconselect');
            	});
            	$(".specIcon").click(function(){       
            	    $('.certifIcon').removeClass('certifIconselect');
            		$(this).addClass('specIconselect');
            		$('.authrIcon').removeClass('authrIconselect');
            	});
            	$(".authrIcon").click(function(){       
            	     $('.certifIcon').removeClass('certifIconselect');
            		$('.specIcon').removeClass('specIconselect');
            		$('.authrIcon').addClass('authrIconselect');
            	});
            	
            	$(".countryIcon").click(function(){       
            	    $(this).addClass("countSelect");
            	    $(this).addClass("opened");
            		$(".partnerIcon").removeClass("partnserselect");
            		$(".qualifIcon").removeClass("qualiselect");
            		$(".extraIcon").removeClass("extraselecct");
            		$(".selectIcon").removeClass("seclselect");
            	});
            	$(".partnerIcon").click(function(){       
            	    $(this).addClass("partnserselect");
            	    $(this).addClass("opened");
            		$(".countryIcon").removeClass("countSelect");
            		$(".qualifIcon").removeClass("qualiselect");
            		$(".extraIcon").removeClass("extraselecct");
            		$(".selectIcon").removeClass("seclselect");
            		
            	});
            	$(".qualifIcon").click(function(){       
            	    $(this).addClass("qualiselect");
            	    $(this).addClass("opened");
            		$(".partnerIcon").removeClass("partnserselect");
            		$(".countryIcon").removeClass("countSelect");
            		$(".extraIcon").removeClass("extraselecct");
            		$(".selectIcon").removeClass("seclselect");
            	});
            	$(".extraIcon").click(function(){       
            	    $(this).addClass("extraselecct");
            	    $(this).addClass("opened");
            		$(".qualifIcon").removeClass("qualiselect");
            		$(".countryIcon").removeClass("countSelect");
            		$(".countryIcon").removeClass("countSelect");
            		$(".selectIcon").removeClass("seclselect");
            	});
            	$(".selectIcon").click(function(){       
            	    $(this).addClass("seclselect");
            		$(".extraIcon").removeClass("extraselecct");
            		$(".qualifIcon").removeClass("qualiselect");
            		$(".extraIcon").removeClass("extraselecct");
            		$(".countryIcon").removeClass("countSelect");
            	});
            }
            /**
             * Design area events
             */
            function designAreaEvents(){
            	//$('.designViewArea').buildJSON();
            	var def_width = $('.creatrRuleArea').width();
            	
            	$("#createArea").click(function(){				   
            	   $(".createNodeForm").slideToggle();
             	   $(this).toggleClass("selectedState");
             	   $(".createOuter").toggleClass("openNode");
              	});
            	$(".expandClose").live("click", function(){
                  		$(this).parent('.siedbarLeft').hide("slide", { direction: "left" }, 500);
            			$('.creatrRuleArea').animate({width: '100%', marginLeft: 0}, {duration: 500});
            			$('.sidebarOutter').animate({ width: '0px'},500);
            			$(this).addClass('expandOpen');
            			$(this).removeClass('expandClose');
            			
            	   });
            	   
            	   $(".expandOpen").live("click", function(){
                  		$(this).parent('.siedbarLeft').show("slide", { direction: "left" }, 500);
            			if( $(".mainContainer").hasClass('fullViewMain'))
            			$('.creatrRuleArea').animate({width: $(window).width()-$('.siedbarLeft').width()-10, marginLeft: 190}, {duration: 500});
            			else
            			$('.creatrRuleArea').animate({width: '682px', marginLeft: 190}, {duration: 500});
            			$('.fullViewMain .creatrRuleArea').animate({  marginLeft: 190}, {duration: 500});
            			$('.sidebarOutter').animate({ width: '190px'},500);
            			$(this).addClass('expandClose');
            			$(this).removeClass('expandOpen');
            			
            	   });
            	
            	
            	$(".fullscreen").live("click",function(){				   
            	    $(".mainContainer").addClass('fullViewMain');
            		$(".mainContainer").animate({ top: '0px', left:'0px' , width: '100%'}, {duration: 400});
            		$('.sub-navigation').hide();
            		$(this).hide();
            		$('.smallscreen').show();
            		resize();
                    });
            	
            	$(".smallscreen").live("click",function(){	
            		$(".mainContainer").removeClass('fullViewMain');
            		 $('.creatrRuleArea').css('width', def_width);
            		 
            		 $(this).hide();
            		 $('.fullscreen').show();
            		 $('.sub-navigation').show();
                    });
            	$(window).resize(function(){
            							  if( $(".mainContainer").hasClass('fullViewMain'))
                        resize();
              	});
            }
            
            function resize() {
                var screen_width = $(window).width();
                var sidebarleft_width = $('.siedbarLeft').width();
                $('.creatrRuleArea').css('width', screen_width-sidebarleft_width-30);
            }
            /**
             * close buttons
             */
            function closeButtons(){
            	$('.opClose').live("click",function(){
	           		//Close for operator popup and expression type popup
	           		$('.oparaterNode').hide();	
	           		$('.twooparaterNode1').hide();
	           	});
            }
            
            /**
             * Handles error ajax
             */
            function handleError(data){
            	var message = "<div style='color:red'>Oops ! Your rule is not saved successfully.Check the site adminstrator.</div>";
		    	//set the Error message
				$('.genericMessageContent').replaceWith(_.template($('#genericMessageTemplate').html(),{message:message}));
				$('.genericMessage').trigger('click');
            }
            
            /**
             * Handles error ajax
             */
            function handleCustomError(data){
            	var message = "<div style='color:red'>" + data + "</div>";
		    	//set the Error message
				$('.genericMessageContent').replaceWith(_.template($('#genericMessageTemplate').html(),{message:message}));
				$('.genericMessage').trigger('click');
            }
            
            /**
             * Generic popup template
             */
            function showFancyPopup(message){
            	$('.genericMessageContent').replaceWith(_.template($('#genericMessageTemplate').html(),{message:message}));
				$('.genericMessage').trigger('click');
            }
            
            /**
             *Handles successful ajax calls.
             */
            function handleSuccess(response,messageObj){
            	//set the Rule Id.
    			
    			var messageSuccess = "Your Rule is saved successfully.";
    			var messageError = "<div style='color:red'>Oops ! Your rule is not saved successfully.Check the site adminstrator.</div>";
    			//This is what the response format would be
    			// response[status,data:[nodeId,nodeName,ruleId,RuleName]]
    			if(response.status == null || response.status == "undefined" || response.status == "error"){
    				//set the Error message
					$('.genericMessageContent').replaceWith(_.template($('#genericMessageTemplate').html(),{message:messageError}));
					$('.genericMessage').trigger('click');
    			}else {
    				
        			$('.ruleId').val(response.data.ruleId);
    				//set the success message
	    			$('.genericMessageContent').replaceWith(_.template($('#genericMessageTemplate').html(),{message:messageSuccess}));
	    			$('.genericMessage').trigger('click');
    			}
            }            
            
            /**
             * Calculate the maximum height for a specific Leaf with a given Leaf DOM.
             */
            function calculateHeight(targetDOM){            	
            	//Find the max height of all the components in scenario.
				var heights = $(targetDOM).find('.node').map(function ()
				{
				    return $(this).height();
				}).get(),
				maxHeight = Math.max.apply(null, heights);		
				return maxHeight;
            }
            
            /**
             * Start traversing through the DOM.
             * For each of Leaf found,find the max height.
             */
            function startTraversing(){
            	//Reset to zero
            	$scenariosHeight = 0;
            	//Holds the previous node top value.
            	$prevNodeTop = null;
            	$('.nodeMainArea').children('.nodesenario1').each(function(){  
            		//Scenario height ie the components.
            		$(this).css("top",$scenariosHeight);    
            		//Holds the data
            		$(this).data("top",$scenariosHeight); 
            		//Current node Top .The diff between the top value of 2 scenarios is the value to be added for tier border as the position is relative.
            		$currentNodeTop = $(this).data('top');
            		//The one that connect scenarios
            		$heightVal = ($currentNodeTop-$prevNodeTop);
            		$(this).prev('.tierBorder').css("height",$heightVal);
            		$leafTotalHeight = traverseOtherLeafInScenario($(this)); 
            		$scenariosHeight += $leafTotalHeight  + $heightBetweenScenario  ;
            		//alert($(this).data('top'));
            		$prevNodeTop = $(this).data('top');
            		
            	});
            }
            /**
             * For Traversing the leaf in a scenario
             * Input is the Target Scenario we want to traverse
             */
            function traverseOtherLeafInScenario(targetScenario){
            	//Reset to zero
            	$leafTotalHeight = 0;
            	//Find the Max height of first leaf in the Scenario..
            	//Ie Previous leaf total height
            	$heightOfScenario = calculateHeight(targetScenario);
            	//If leaf is present,then update the $leafTotalHeight at the each loop below and return the value.
            	$leafTotalHeight += $heightOfScenario;
            	//Now find the position of previous Leaf.
            	$positionFromPreviousLeaf = $(targetScenario).position().top;
            	//Now that we know the position of previous Leaf and also the total height of the first leaf in Scenario.
            	//Now reposition the other leaf in the Scenario accordingly.
            	/**
        		 * So first get the maxheight of first leaf ie $heightOfScenario
        		 * add it up with first leaf position top 
        		 * and add it up with constant between between leafs.
        		 * The total will give you the overall position where the leaf should be placed.
        		 */ 
            	$finalHeight = $positionFromPreviousLeaf + $heightOfScenario + $heightBetweenLeaf;
            	//Get Previous leaf's  top..Subtract from the present children leaf will get the height for the tier border between leaf.
            	$prevNodeTop = 0;
            	$prevNodeTop = $(targetScenario).data('top');
            	$(targetScenario).children('.nodesenario3.nodesenario2').each(function(){
            		//Holds the data
            		$(this).data("top",$finalHeight);
            		//Apply Top CSS
            		//$(this).css('top',$finalHeight);    
            		//Get the current Node Top set
            		$currentNodeTop = $(this).data("top");
            		//The one that connect scenarios
            		$heightVal = ($currentNodeTop-$prevNodeTop) ;
            		$(this).prev('.tierBorderLeaf').css('height',$heightVal);
            		//Now get this leafs position max height and set the height for next one.
            		$finalHeight = calculateHeight($(this)) + $finalHeight + $heightBetweenLeaf;
            		//update the leaf total height
            		$leafTotalHeight =$finalHeight;
            		//Now reset the previous leaf Top to the present one.
            		$prevNodeTop = $currentNodeTop;
            	});
            	$(this).data("top",$leafTotalHeight);
            	return $leafTotalHeight;
            }
    	})(jQuery);
        
		/**
		 * For Other fields
		 */	
		var ruleFieldArray = new Array();
		var fieldObj = new Object();
		fieldObj.name="Intendeduse";
		fieldObj.field = "intendedUse";
		fieldObj.datatype = "checkbox";
		fieldObj.errorMessage = "Intended Use is mandatory";
		fieldObj.requiredForCreate="true";
		fieldObj.requiredForEdit="true";
		ruleFieldArray.push(fieldObj);
		
		var fieldObj = new Object();
		fieldObj.name="ApplyRuleFor";
		fieldObj.datatype = "option";
		fieldObj.field = "applyRuleFor";
		fieldObj.errorMessage = "Apply Rule for is mandatory";
		fieldObj.requiredForCreate=true;
		fieldObj.requiredForEdit=true;
		ruleFieldArray.push(fieldObj);
		
		var fieldObj = new Object();
		fieldObj.name="StartDate";
		fieldObj.datatype = "text";
		fieldObj.field = "startDate";
		fieldObj.errorMessage = "Start Date is mandatory";
		fieldObj.requiredForCreate=true;
		fieldObj.requiredForEdit=true;
		ruleFieldArray.push(fieldObj);
		
		var fieldObj = new Object();
		fieldObj.name="EndDate";
		fieldObj.datatype = "text";
		fieldObj.field = "endDate";
		fieldObj.errorMessage = "End Date is mandatory";
		fieldObj.requiredForCreate=false;
		fieldObj.requiredForEdit=false;
		ruleFieldArray.push(fieldObj);
		
		var fieldObj = new Object();
		fieldObj.name="RuleName";
		fieldObj.datatype = "text";
		fieldObj.field = "ruleName";
		fieldObj.errorMessage = "Rule Name is mandatory";
		fieldObj.requiredForCreate=true;
		fieldObj.requiredForEdit=true;
		ruleFieldArray.push(fieldObj);
		
		var fieldObj = new Object();
		fieldObj.name="NodeName";
		fieldObj.datatype = "text";
		fieldObj.field = "nodeName";
		fieldObj.errorMessage = "Node Name is mandatory";
		fieldObj.requiredForCreate=true;
		fieldObj.requiredForEdit=true;
		ruleFieldArray.push(fieldObj);
		
		var fieldObj = new Object();
		fieldObj.name="nodeId";
		fieldObj.datatype = "text";
		fieldObj.field = "nodeId";
		fieldObj.errorMessage = "Node Id is mandatory.Check the Administrator";
		fieldObj.requiredForCreate=false;
		fieldObj.requiredForEdit=true;
		ruleFieldArray.push(fieldObj);
		
		var fieldObj = new Object();
		fieldObj.name="ruleId";
		fieldObj.datatype = "text";
		fieldObj.field = "ruleId";
		fieldObj.errorMessage = "Rule Id is Mandatory..Please check the administrator";
		fieldObj.requiredForCreate=false;
		fieldObj.requiredForEdit=true;
		ruleFieldArray.push(fieldObj);
		
		var fieldObj = new Object();
		fieldObj.name="applicableCountries";
		fieldObj.field = "applicableCountries";
		fieldObj.datatype = "checkbox";
		fieldObj.errorMessage = "Applicable Countries or Billing Countries or Install Countries are mandatory";
		fieldObj.requiredForCreate=false;
		fieldObj.requiredForEdit=false;
		ruleFieldArray.push(fieldObj);
		
		var fieldObj = new Object();
		fieldObj.name="billingCountries";
		fieldObj.field = "billingCountries";
		fieldObj.datatype = "checkbox";
		fieldObj.errorMessage = "Applicable Countries or Billing Countries or Install Countries are mandatory";
		fieldObj.requiredForCreate=false;
		fieldObj.requiredForEdit=false;
		ruleFieldArray.push(fieldObj);
		
		var fieldObj = new Object();
		fieldObj.name="installCountries";
		fieldObj.field = "installCountries";
		fieldObj.datatype = "checkbox";
		fieldObj.errorMessage = "Applicable Countries or Billing Countries or Install Countries are mandatory";
		fieldObj.requiredForCreate=false;
		fieldObj.requiredForEdit=false;
		ruleFieldArray.push(fieldObj);

/**
 * Method to save data fields for Creating rule
 * @param fields
 */
	



/**
 * Make ajax call.Common method to make ajax calls.
 */
function makeAjaxCall(action,requestParam){	
	$.ajax({
	    url: action,
	    type: "POST",
	    data: { ruleParam: JSON.stringify(requestParam) },
	    success: function(data){$("body").ruleNamespace().successHandler(data);},
	    error: function(data){$("body").ruleNamespace().errorHandler(data);},	    			
	},"json");
}
	//For Tabs END

	/**
	 * Create Rule Functionlities.
	 *//*
	$('.nodeblue.position1 .select').live('change', function() {
       //First get the data holder in this node.
		var dataHolderInThisNode = $(this).parents('.nodeblue').data("dataHolder");
		
    });*/
	 	 
	 	/**
	     * First get the control of the component you have selected.This would help to 
	     * get the component object in a variable to be refered anywhere else.
	     */	   
	    var mappingForComponentSelectedOptions= {"position1": ".partnerIcon","position2": ".qualifIcon","position3":".countryIcon","position6":"extraIcon","extraValidation":".extraIcon"};
	    //Global variable to see which component is selected.
	    var scenarioSelected = null;
	    $('.node').live('click', function() {    
	    	scenarioSelected = $(this).parent();
	    	
	    	accordionFunc(this);
	    });    
	    //Accordion funciton to control click events for all the components mentioned out here.
	    function accordionFunc(obj){    	
	    	if($(obj).hasClass('position1')){
	    		var divTobeTriggered = mappingForComponentSelectedOptions['position1'];
	    		//Find if the accordion is already open.If ope,dont do anything
	    		$(divTobeTriggered).trigger('click');
	    	}
	    	if($(obj).hasClass('position2')){
	    		var divTobeTriggered = mappingForComponentSelectedOptions['position2'];
	    		$(divTobeTriggered).trigger('click');
	    	}
	    	if($(obj).hasClass('position3')){
	    		var divTobeTriggered = mappingForComponentSelectedOptions['position3'];
	    		$(divTobeTriggered).trigger('click');
	    	}
	    	if($(obj).hasClass('nodegreen')){
	    		var divTobeTriggered = mappingForComponentSelectedOptions['extraValidation'];
	    		$(divTobeTriggered).trigger('click');
	    	}
	    }
	   /**
	    * Popup when the user clicks any + sign.
	    */ 
	   var currentAddOperatorNode ; 
	   var isOperandAlreadyExisting = false;
	   
	
    
    /**
     * Convert Rules to JSON START ***************************************************************************************************************
     */
       
        
        /**
         * This method will build the JSON related to specific components.
         * Example,Partner Type,Qualifications ,Country Type and Partner
         */
        (function($) { 
        	jQuery.fn.buildScenarioLeafs = function() { 
        		//This holds the collection of all the leafs
        		var collectionOfAllLeafs = new Array();
        		var index =0;
        		//Now build for each node.
        		var singleLeafCollectionArray = $(this).buildEachLeaf(index);
        		index++;
        		//Now add single leaf into the Bigger collection of all the Leafs.
        		collectionOfAllLeafs.push(singleLeafCollectionArray);        		
        		/**
        		 * Iterate through the leaf and get the data for all the leafs under this scenario.
        		 */
        		$(this).children('.nodesenario3').each(function(){        			
        			//For the rest of the leafs.
        			collectionOfAllLeafs.push($(this).buildEachLeaf(index));
        			index++;
        		});
        		//Update the Leaf Collections PreConnector and PostConnector
        		//Ie One operator plus sign at the start of the first leaf in Scenario and the end sign hanging below the last leaf added.
        		//$leafEndOperand = $(this).find('.leafLevelOperatorEnd').css('background-color','red');
        		
        		return collectionOfAllLeafs;
        };        
        })(jQuery); 
        
        /***
         * Building for each node
         */
        (function($) { 
        	jQuery.fn.buildEachLeaf = function(index) {  
        		//Accumulate all the components of a leaf in an array
        		var tempArray =new Array();        		
        		//New Leaf Object
        		var singleLeafObj = new Object();
        		//Dummy name
        		singleLeafObj.name="Leaf";
        		//Connector as of now Harcoded.
        		//singleLeafObj.connector="AND";
        		//Pre Connector
        		singleLeafObj.preConnector="";
        		//Post Connector
        		singleLeafObj.postConnector="";
        		
        		//Now find the nodes.
        		/**
        		 * Important note : the way we structured the UI is as follow.
        		 * <Scenario1><partnerType><qualifications><countryType><Partner><leaf2></leaf2><leaf3></leaf3></Scenario1>
        		 * <Scenario2><partnerType><qualifications><countryType><Partner><leaf2></leaf2><leaf3></leaf3></Scenario2>			
        		 */
        		$(this).children('.node').each(function(){
        			//Check if the leaf has Extra Validation.If extra validation,then leaf type should be Arithmetic.
        			//Otherwise Boolean.
        			if($(this).hasClass('nodegreen')){        				
                		singleLeafObj.type="ARITHMETIC";
        			}else{
        				singleLeafObj.type="BOOLEAN";
        			}
        			if($(this).isDataHolderEmpty()){
        				//alert("Empty");
        				//Dont do anything as it is empty
        			}else{
        				var dataHolder = $(this).data("dataHolder");        				
        				//Push the leaf object into the Single Leaf Collection.
        				tempArray.push(dataHolder);
        			}        			
        		});        		
        		//Update the PreConnector and Post Connector for the leafs.
        		$connector = buildLeafConnectors(this,index);
        		
        		singleLeafObj.postConnector = $connector;
        		//singleLeafObj.data holds the data for that leaf.
        		//Data is nothing but array of all the components like partner Type,Qualifications,Country type and Partner.
        		singleLeafObj.data=tempArray;
        		
        	return 	singleLeafObj;
        	 };
        	 /**
        	  * Functin to build COnnectors for leaf. 
        	  */
        	 function buildLeafConnectors(targetDOM,index){ 
        		 //Only for the first leaf,we keep the tier Border inside the DOM ..For the rest,its outside the Scenario class
        		 if(index == 0 ){
        			 //Iterate through the DOM and find the tierBorderLeaf and get the data out of it. 
            		 $tierBorder = $(targetDOM).find('.tierBorderLeaf').eq(index);
            		 var connector ="";
            		 //Get leaf Pre Connector and Post Connector.
            		$($tierBorder).find('.operandValue').each(function(){
            			connector += $(this).data('alais') + ",";
            		});        		 
        		 }else{
        			//Iterate through the DOM and find the tierBorderLeaf and get the data out of it. 
            		 $tierBorder = $(targetDOM).next('.tierBorderLeaf');
            		 var connector ="";
            		 //Get leaf Pre Connector and Post Connector.
            		$($tierBorder).find('.operandValue').each(function(){
            			connector += $(this).data('alais') + ",";
            		});        		 
        		 }
        		
        		return connector;
        	 }
        
        })(jQuery); 
        
        /**
         * Get the data attribute from the specific node
         */
        (function($) { 
        	jQuery.fn.retrieveDataAttr = function() {
        		return $(this).data("dataHolder");
        };})(jQuery);   
        
        (function($) { 
        	jQuery.fn.isDataHolderEmpty = function() {
        		$dataHolder = $(this).data("dataHolder");
        		if($dataHolder !==undefined && $dataHolder.length !== null && $dataHolder.length > 0){
        			return false;
        		}else{
        			return true;
        		}
        };})(jQuery);
        
       
       
    /**
     * Convert Rules to JSON END  ***************************************************************************************************************
     */       
        
     /**
      * Binding for code view and split view START
      */           
        $(".designViewTab").live("click",function(){
			   $('.designViewArea').show();
			   $('.codeViewArea').hide();
			   $('.splitViewArea').hide();
             $('.designViewArea').addClass('visibleArea');
			   $('.codeViewArea').removeClass('visibleArea');
			   $('.splitViewArea').removeClass('visibleArea');
                        
			   $('.designViewTab').addClass('designViewselect');
			   $('.codeViewTab').removeClass('codeViewselect');
			   $('.splitViewTab').removeClass('splitViewselect');
	 });
	 $(".codeViewTab").live("click",function(){
		 		//First build the JSON
		 		$jsonView = $('.designViewArea').ruleNamespace().showCodeView();
		 		
		 		/**
		 		 * Now convert the JavaObject to JSON representation 
		 		 */		 		
			   $('.designViewArea').hide();		
			   //Remove the old one pls
			   $('.refreshCodeView').remove();
			   //var val = '<div class="refreshCodeView">' + JSON.stringify($jsonView) + '</div>';
			   var templ =  _.template($('#codeView_template').html());
			   $('.codeViewArea').append(templ);
			   $('.codeViewArea').show();
			   $('.splitViewArea').hide();                        
               $('.designViewArea').removeClass('visibleArea');
			   $('.codeViewArea').addClass('visibleArea');
			   $('.splitViewArea').removeClass('visibleArea');
                        
			    $('.designViewTab').removeClass('designViewselect');
			   $('.codeViewTab').addClass('codeViewselect');
			   $('.splitViewTab').removeClass('splitViewselect');
	 });
	 $(".splitViewTab").live("click",function(){
		 		//First build the JSON
		 	   $jsonView = $('.designViewArea').ruleNamespace().prepareJSON();
		 		/**
		 		 * Create a clone of the existing design view DOM and place it here.
		 		 */
		 	   $designViewClone= $('.designViewArea').clone();
		 	  
		 	   
			   $('.designViewArea').hide();
			   $('.codeViewArea').hide();
			   //Show the cloned DOM in this place.
			   $('.designViewArea').clone().show().appendTo('.splitdesignView');
			   $('.splitViewArea').show();
                        
               $('.designViewArea').removeClass('visibleArea');
			   $('.codeViewArea').removeClass('visibleArea');
			   $('.splitViewArea').addClass('visibleArea');
			   $('.splitViewScroll2').append(JSON.stringify($jsonView));
                        
			   $('.designViewTab').removeClass('designViewselect');
			   $('.codeViewTab').removeClass('codeViewselect');
			   $('.splitViewTab').addClass('splitViewselect');
	 }); 
	 
	 //Saving a rule when the user clicks Save.	 
	 $('.saveRule').live("click",function(){
		 	//Capture the tab id..for data reloading
		 	$tabId = $(this).data('tabid');
			$('.designViewArea').buildRuleJSON($tabId);
	 });
	 /**
	  * Build the Rules and attaches the Scenario JSON to this one.
	  */	 
	 (function($) {        	
     	jQuery.fn.buildRuleJSON = function(tabId) {         		
     		//This is the top Rule object where all the data are stored.
     		//append all the data related to one Rule in this object to be sent to the server.
 			var ruleObj = new Object(); 
 			ruleObj.tabId=tabId;
 			//Saving field and also adding errors.
 			var fieldObject  = $("body").ruleNamespace().saveAndValidateFields(ruleFieldArray);
 			var preCon = fieldObject.fieldData;
 			//Create new PreConditions.
 			var preConditions = new Object(); 
 			preConditions.nodeName = preCon['NodeName'] + "";
 			preConditions.ruleName = preCon['RuleName'] + ""; 
 			preConditions.startDate = preCon['StartDate'] + ""; 	
 			preConditions.endDate = preCon['EndDate'] + "";
 			preConditions.applyRuleFor = preCon['ApplyRuleFor'] + "";
 			preConditions.intendedUse = preCon['Intendeduse'] + ""; 	
 			preConditions.applicableCountries = preCon['applicableCountries'] + "";	
 			preConditions.billingCountries = preCon['billingCountries'] + "";	
 			preConditions.installCountries = preCon['installCountries'] + "";						 
			 //For Billing,Install and Applicable countries END 			
 			ruleObj.nodeId = preCon['nodeId']+ ""; 	
 			ruleObj.ruleId = preCon['ruleId']+ ""; 	
 			//PreConditions 
 			ruleObj.preConditions = preConditions; 			
     		//Build the Scenario details by reading through the DOM and creating JSON out of it.
     		//ruleObj.scenarios =  $('.designViewArea').buildJSON();
 			ruleObj.scenarios = $('.designViewArea').ruleNamespace().prepareJSON();
 			//Validate Rules.
     		validateRules(fieldObject,ruleObj);
     	};
     	/**
     	 * Validate Rules when the user clicks Save
     	 */
     	function validateRules(fieldObj,ruleObj){ 
     		var errorObj  =fieldObj.error;     		
     		//If no Rule Error,then make ajax call and save the rules.
     		if(errorObj == null || errorObj == "undefined" || errorObj == '' || (errorObj.length == 0 )){
     			makeAjaxCall("rule_create.do",ruleObj);
     		}else{
     			$('.ruleErrorPopup').replaceWith(_.template($('#errorHandlerRules').html(),{data:errorObj}));
         		$('.errorPop').trigger('click');
     			//return false;
     		}
     	}	 
	 })(jQuery); 
		 
	 /**
	  * Adds a new Scenario to the flow START
	  */
	 $(".addnewsenario").live("click",function(){	
			
			//While adding new scenario,we need to find the position of the previous scenarios leaf.Otherwise
			//there the UI will be distorted.So check the previous ones.
		
			//First get the hold of UI tabs panel.
			$tabPanel = $(this).parents('.ui-tabs-panel');
	
			//First check the previous scenario and find the last leaf being added.Accordingly adjust
			//the rendering of this new scenario and position it accordingly.
			var lastNodeScenarioInDOM=$($tabPanel).find(".nodesenario1:last");
			//Once we know the last scenario in DOM,now we see the last leaf right into this DOM.Accordingly we position
			//the new Scenario we are going to add.
			$lastLeafAdded = $(lastNodeScenarioInDOM).children('.nodesenario3:last');
			
			//Check if the last leaf is available or not..If not we get error
			if($lastLeafAdded.length == 0 ){
				$lastNodeHeight = $(lastNodeScenarioInDOM).position().top;
			}else{
				//Well.we have a leaf available in previous node.So get the position and display this Scenario accordingly.
				$lastNodeHeight = $($lastLeafAdded).position().top;
			}
			//add 200 px to this
			$nodeHeight = $lastNodeHeight + 200;
			$tierHeight = $lastNodeHeight+100;
			$tierAreaTemplate = _.template($('#tier-border-scenario').html(), {height: ($nodeHeight) + 'px',tierTop:$tierHeight+ 'px'});			   
		    //The acutal scenario to be added.
		    $('.nodeMainArea').append(_.template($('#node-scenario-template').html(), { cssName: ' nodesenario2', top: "",tierArea:$tierAreaTemplate,dataTop:''}));
		    $('.tierBorder').show();
		    $('.tierBorder').animate(500);	
		    $('.body').ruleNamespace().reposition();
	 });		 


	
