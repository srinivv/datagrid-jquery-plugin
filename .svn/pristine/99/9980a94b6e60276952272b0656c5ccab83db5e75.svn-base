package com.cisco.apas.dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import oracle.jdbc.driver.OracleTypes;
import oracle.sql.ARRAY;
import oracle.sql.ArrayDescriptor;

import org.apache.log4j.Logger;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.support.AbstractSqlTypeValue;
import org.springframework.jdbc.object.StoredProcedure;
import org.springframework.util.StopWatch;

import com.cisco.apas.entity.Deal;
import com.cisco.apas.entity.DealException;
import com.cisco.apas.entity.dealExceptionId;
import com.cisco.apas.util.StringUtils;

public class DealExceptionDao extends BaseDao implements DataAccessQueries {

	private static final Logger logger = Logger.getLogger(PartnerExceptionDao.class);
	
	public int getDealExceptionCount(){
		try {
			final org.hibernate.Criteria criteria = this.getSession(false).createCriteria(DealException.class).add(Restrictions.ne("status", "DELETED"));
			criteria.setProjection(Projections.rowCount());
			
			return (Integer) criteria.uniqueResult();
		} catch (org.hibernate.HibernateException ex) {
			throw super.convertHibernateAccessException(ex);
		}
	}
	
	
	public List<DealException> getAllDExceptions(int start, int end, int pageSize) {
		try {
			final org.hibernate.Criteria criteria = this.getSession(false).createCriteria(DealException.class).addOrder(Order.desc("updatedOn")).add(Restrictions.ne("status", "DELETED"));
			criteria.setFirstResult(start-1);
			criteria.setMaxResults(pageSize);
			List<DealException> results = criteria.list();
			return results;
		} catch (org.hibernate.HibernateException ex) {
			throw super.convertHibernateAccessException(ex);
		}
	}
	
	public String saveDealException(String userId, String dealId,String exceptionDesc, String status, Date effDate, Date endDate, String[] nodeList) {
		try {

			ExceptionCreationStatus exceptionCreationStatus = new ExceptionCreationStatus(apasJdbcTemplate);
			Map inputParams = new HashMap();
			inputParams.put(ExceptionCreationStatus.I_USER_ID, userId);
			inputParams.put(ExceptionCreationStatus.I_DEAL_ID, Integer.parseInt(dealId));
			inputParams.put(ExceptionCreationStatus.I_STATUS, status);
			inputParams.put(ExceptionCreationStatus.I_START_DATE, effDate);
			inputParams.put(ExceptionCreationStatus.I_END_DATE, endDate);
			inputParams.put(ExceptionCreationStatus.I_DESCRIPTION,exceptionDesc);
			inputParams.put(ExceptionCreationStatus.I_NODE_LIST, new JavaToOracleNodeListConverter(nodeList));
			long time = System.currentTimeMillis();
			Map outputParams = exceptionCreationStatus.execute(inputParams);
			logger.info("Time taken checkPartnerException : PSE_BUSINESS_RULE_PKG.SAVE_DEAL_EXCEPTION :"
							+ (System.currentTimeMillis() - time));
			String errorName = (String) outputParams.get(ExceptionCreationStatus.O_ERROR_MSG);
			BigDecimal errorCode = (BigDecimal) outputParams.get(ExceptionCreationStatus.O_ERROR_CODE);
			String statusMsg = "success";
			if (errorCode.intValue() == -1) {
				statusMsg = errorName ;
			}
			return statusMsg;
		} catch (Exception e) {
		
			if (e instanceof DAOException) {
				logger.error("Encountered DAOException :: " + e
						+ " in Add Exception");
				e.printStackTrace();
				throw (DAOException) e;
			} else {
				logger.error("Encountered exception: " + e
						+ " in Add Exception.");
				e.printStackTrace();
				throw new DAOSystemException(ERROR_ADMIN, e);
			}
		}
	}
	
	private class ExceptionCreationStatus extends StoredProcedure {
		private static final String PROC_NAME = "PSE_BUSINESS_RULE_PKG.SAVE_DEAL_EXCEPTION";

		public static final String I_USER_ID = "I_USER_ID";

		public static final String I_DEAL_ID = "I_DEAL_ID";
		
		public static final String I_STATUS = "I_STATUS";
		
		public static final String I_START_DATE = "I_START_DATE";

		public static final String I_END_DATE = "I_END_DATE";
		
		public static final String I_DESCRIPTION = "I_DESCRIPTION";
		
		public static final String I_NODE_LIST = "I_NODE_TBL";

		public static final String O_ERROR_CODE = "O_ERROR_CODE";

		public static final String O_ERROR_MSG = "O_ERROR_MSG";

		public ExceptionCreationStatus(JdbcTemplate jdbcTemplate) {
			super(jdbcTemplate, PROC_NAME);
			setFunction(false);

			declareParameter(new SqlParameter(I_USER_ID, OracleTypes.VARCHAR));
			declareParameter(new SqlParameter(I_DEAL_ID, OracleTypes.NUMBER));
			declareParameter(new SqlParameter(I_STATUS, OracleTypes.VARCHAR));
			declareParameter(new SqlParameter(I_START_DATE, OracleTypes.DATE));
			declareParameter(new SqlParameter(I_END_DATE, OracleTypes.DATE));
			declareParameter(new SqlParameter(I_DESCRIPTION, OracleTypes.VARCHAR));
			declareParameter(new SqlParameter(I_NODE_LIST, OracleTypes.ARRAY));
			declareParameter(new SqlOutParameter(O_ERROR_CODE, OracleTypes.NUMERIC));
			declareParameter(new SqlOutParameter(O_ERROR_MSG,OracleTypes.VARCHAR));
			compile();
		}
	}
	
	private class JavaToOracleNodeListConverter extends AbstractSqlTypeValue {
		String[] nodeList = null;
		
		public JavaToOracleNodeListConverter(String[] nodeList){
			this.nodeList = nodeList;
		}
		
		public Object createTypeValue(Connection underlyingConn, int type, String typeName) throws SQLException {
			ARRAY dbArray = null;
  			try	{
  				Connection ocon =  getApasJdbcTemplate().getNativeJdbcExtractor().getNativeConnection(underlyingConn);
  				ArrayDescriptor arrayDesc = ArrayDescriptor.createDescriptor("SD_NODE_TYPE", ocon);
  				
  				int[] nodeArr = new int[nodeList.length];
  				for (int i = 0; i < nodeList.length; i++){
  					nodeArr[i] =Integer.parseInt(nodeList[i]);
  				}
  				
  				dbArray = new ARRAY(arrayDesc, ocon, nodeArr);
  				
  			} catch (Exception e) {
  				e.printStackTrace();
  			}
  			return dbArray;
		}
		
	}
	
	private class JavaToOracleDealListConverter extends AbstractSqlTypeValue {
		String[] dealList = null;
		
		public JavaToOracleDealListConverter(String[] dealList){
			this.dealList = dealList;
		}
		
		public Object createTypeValue(Connection underlyingConn, int type, String typeName) throws SQLException {
			ARRAY dbArray = null;
  			try	{
  				Connection ocon =  getApasJdbcTemplate().getNativeJdbcExtractor().getNativeConnection(underlyingConn);
  				ArrayDescriptor arrayDesc = ArrayDescriptor.createDescriptor("PSE_DEAL_ID_TYPE", ocon);
  				
  				int[] dealArr = new int[dealList.length];
  				for (int i = 0; i < dealList.length; i++){
  					dealArr[i] =Integer.parseInt(dealList[i]);
  				}
  				
  				dbArray = new ARRAY(arrayDesc, ocon, dealArr);
  				
  			} catch (Exception e) {
  				e.printStackTrace();
  			}
  			return dbArray;
		}
		
	}
	
	public boolean deleteDealException(String[] nodeList,String[] dealList) {
		try {

			DeleteDealException deleteDealException = new DeleteDealException(apasJdbcTemplate);
			Map inputParams = new HashMap();
			inputParams.put(DeleteDealException.I_NODE_LIST, new JavaToOracleNodeListConverter(nodeList));
			inputParams.put(DeleteDealException.I_DEAL_LIST, new JavaToOracleDealListConverter(dealList));
			System.out.println("Executing Proc: " + deleteDealException.PROC_NAME + " with Input Params: " + inputParams);
			StopWatch sw = new StopWatch();
			sw.start(deleteDealException.PROC_NAME);
			Map outputParams = deleteDealException.execute(inputParams);
			sw.stop();
			System.out.println("Executed Proc in " + sw.getTotalTimeSeconds() + " seconds");
			
			String errorMsg = (String) outputParams.get(DeleteDealException.O_ERROR_MSG);
			BigDecimal errorCode = (BigDecimal) outputParams.get(DeleteDealException.O_ERROR_CODE);
			if (errorCode.intValue() == -1) {
				return false;
			}
			return true;
		} catch (Exception e) {

			if (e instanceof DAOException) {
				logger.error("Encountered DAOException :: " + e + " in Delete Deal Exception");
				e.printStackTrace();
				throw (DAOException) e;
			} else {
				logger.error("Encountered exception: " + e + " in Delete Deal Exception.");
				e.printStackTrace();
				throw new DAOSystemException(ERROR_ADMIN, e);
			}
		}
	}
	
	private class DeleteDealException extends StoredProcedure {
		private static final String PROC_NAME = "PSE_BUSINESS_RULE_PKG.delete_deal_pr";

		public static final String I_NODE_LIST = "I_NODE_TBL";
		public static final String I_DEAL_LIST = "I_DEAL_TBL";
       	public static final String O_ERROR_CODE = "O_ERROR_CODE";
       	public static final String O_ERROR_MSG = "O_ERROR_MSG";      	

		public DeleteDealException(JdbcTemplate jdbcTemplate) {
			super(jdbcTemplate, PROC_NAME);
			setFunction(false);

			declareParameter(new SqlParameter(I_DEAL_LIST, OracleTypes.ARRAY));
			declareParameter(new SqlParameter(I_NODE_LIST, OracleTypes.ARRAY));
			declareParameter(new SqlOutParameter(O_ERROR_CODE, OracleTypes.NUMERIC));
			declareParameter(new SqlOutParameter(O_ERROR_MSG, OracleTypes.VARCHAR));
			compile();
		}
	}
	
	public DealException getDealException(long dealId, long nodeId) {

		DealException dExcep = null;
		try {

			dealExceptionId dId = new dealExceptionId();
			dId.setDealId(dealId);
			dId.setNodeId(nodeId);
			
			dExcep = (DealException)(this.getSession(false).get(DealException.class, dId));
			List<Deal> deals = getDealName(dealId);
			if (deals != null && deals.size() > 0) {
				dExcep.setDealName(deals.get(0).getName());
			}

			System.out.println("==== DealExceptionDao getDealException DealId : " + dExcep.getId().getDealId() + ", NodeId : " + dExcep.getId().getNodeId() + ", Name : " + dExcep.getPartnerName());
			
		} catch (Exception e) {
			System.out.println("Error while get the DealException");
			e.printStackTrace();
		}
		return dExcep;
	}
	
	public int updateDealException(DealException dealException){
		
		try {
			dealExceptionId dId = new dealExceptionId();
			dId.setDealId( dealException.getId().getDealId() );
			dId.setNodeId( dealException.getId().getNodeId() );
			
			DealException dExcep = (DealException)(this.getSession(false).get(DealException.class, dId));
			if(dExcep!=null){
				
				System.out.println("==== DealExceptionDao updateDealException DealId : " + dExcep.getId().getDealId() + ", NodeId : " + dExcep.getId().getNodeId() + ", Name : " + dealException.getPartnerName());
				
				dExcep.setDealName(dealException.getDealName());
				dExcep.setStartDate(dealException.getStartDate());
				dExcep.setEndDate(dealException.getEndDate());
				dExcep.setExceptionDescription(dealException.getExceptionDescription());
				dExcep.setUpdatedBy(dealException.getUpdatedBy());
				
				return 1;
				
			}else{
				// No record found
			}
			
		} catch (Exception e) {
			System.out.println("Error while get the DealException");
			e.printStackTrace();
		}		
		return 0;
	}
	
	public List<Deal> getDealName(long dealId) {

		String sql = "select opty_name from cq_deal where opty_number = '" + dealId + "'";
		
		List<Deal> deals = getApasJdbcTemplate().query(sql.toString(), new RowMapper<Deal>() {
			public Deal mapRow(ResultSet rs, int rowNum) throws SQLException {
				Deal deal = new Deal();
				deal.setName(rs.getString("opty_name"));
				return deal;
			}
		});
		
		return deals;
	}

	public List<Deal> getDeals(String searchTerm) {

		StringBuffer sql = new StringBuffer("select opty_number, opty_name from cq_deal ");
		sql.append("where (upper(opty_name) like ");
		sql.append("upper('" + searchTerm + "%')");
		sql.append(" OR ");
		sql.append("opty_number like ");
		sql.append("'" + searchTerm + "%')");
		sql.append(" and rownum <= 100 ");
		
		List<Deal> deals = getApasJdbcTemplate().query(sql.toString(), new RowMapper<Deal>() {
			public Deal mapRow(ResultSet rs, int rowNum) throws SQLException {
				Deal deal = new Deal();
				deal.setId(rs.getLong("opty_number"));
				deal.setName(rs.getString("opty_name"));
				return deal;
			}
		});
		
		return deals;
	}
	
}
