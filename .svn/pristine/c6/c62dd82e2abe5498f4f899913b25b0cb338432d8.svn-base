package com.cisco.apas.actions;

import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.InitializingBean;

import com.cisco.apas.APASConstants;
import com.cisco.apas.entity.Deal;
import com.cisco.apas.entity.DealException;
import com.cisco.apas.entity.Node;
import com.cisco.apas.entity.dealExceptionId;
import com.cisco.apas.service.APASService;
import com.cisco.apas.util.DateUtils;
import com.cisco.apas.util.StringUtils;

public class DealExceptionAction extends BaseAction implements InitializingBean {
	
	private static final long serialVersionUID = 1L;

	private static final Logger logger = Logger.getLogger(DealExceptionAction.class);

	private APASService apasService;
	
	private String allNodeIds;
	
	private String allNodeNames;
		
	private Node[] nodeList;
	
	private String nodeName;
	
	private int countDException;
	
	public String execute() {

		if (logger.isInfoEnabled()) {
			logger.info("Calling PartnerExceptionAction execute...");
		}

		return "success";
	}
	
	public String load() {

		if (logger.isInfoEnabled()) {
			logger.info("Calling DealExceptionAction load...");
		}

		try {
			int start = Integer.parseInt(request.getParameter("start"));
			int end = Integer.parseInt(request.getParameter("end"));
			int pageSize = Integer.parseInt(request.getParameter("pagesize"));

			List<DealException> dealExceptions = getApasService().getAllDExceptions(start, end, pageSize);
			int totalRecords = getApasService().getDealExceptionCount();

			JSONObject jsonResponse = new JSONObject();
			jsonResponse.put("totalRows", totalRecords);

			JSONArray jsonRowsArray = new JSONArray();
			JSONObject jsonRow = null;
			for (DealException dexception : dealExceptions) {

				jsonRow = new JSONObject();
				jsonRow.put("dealId", dexception.getId().getDealId());
				jsonRow.put("nodeId", dexception.getId().getNodeId());
				jsonRow.put("nodeName", dexception.getNodeName());
				jsonRow.put("exceptionDescription", dexception.getExceptionDescription());
				jsonRow.put("dealStartDate", DateUtils.formatDate(dexception.getStartDate()));
				jsonRow.put("dealEndDate", DateUtils.formatDate(dexception.getEndDate()));
				jsonRow.put("exceptionstatus",dexception.getStatus());
				updateAuditableFields(jsonRow, dexception);
				jsonRowsArray.put(jsonRow);
			}
			jsonResponse.put("rows", jsonRowsArray);

			sendJSONObject(jsonResponse);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public String create() {
		logger.info("Calling DealExceptionAction create...");

		String[] nodeIds = allNodeIds.split(",");
		String[] nodeNames = allNodeNames.split(",");
		int numOfNodes = nodeIds.length;
		nodeList = new Node[numOfNodes];
		for(int i=0; i < numOfNodes; i++) {
			Node node = new Node();
			node.setId(Long.parseLong(nodeIds[i]));
			node.setName(nodeNames[i]);
			nodeList[i] = node;
		}

		return "create";
	}
	
	public String save(){
		
		String nodes = request.getParameter("nodes");
		String nodeName = request.getParameter("nodeName");
	
		String userId = request.getRemoteUser();
		String exceptionDesc = null;
		String dealId = null;
		String startDate = null;
		String endDate = null;
		String[] items = null;
		String status = "ACTIVE";
		DateFormat formatter ; 
		Date effDate = null ;
		Date end_date = null;
		JSONObject jsonResponse = new JSONObject();
		
		try {
			JSONObject jsonObject = new JSONObject(nodes);
			JSONArray jsonArray;
			jsonArray = jsonObject.getJSONArray("nodeList");
			exceptionDesc = jsonObject.getString("description");
			dealId =jsonObject.getString("dealId");
			startDate = jsonObject.getString("startDate");
			if(jsonObject.getString("endDate")!=null){
				endDate = jsonObject.getString("endDate");	
			}else{
				endDate = null;
			}
			
			items = new String[jsonArray.length()];
			for(int i = 0; i < jsonArray.length(); i++) {
				JSONObject item = (JSONObject)jsonArray.get(i);
			    items[i] = item.getString("item");
			}
			   formatter = new SimpleDateFormat("MM/dd/yyyy");
			   
			   effDate = (Date)formatter.parse(startDate);
			
			   if (endDate != null && !endDate.equalsIgnoreCase("")) {
					end_date = (Date) formatter.parse(endDate);
				}
			
			
			   String msg = getApasService().saveDealException(userId, dealId, exceptionDesc, status, effDate, end_date, items);
				
				if (msg != null && msg.equalsIgnoreCase("success")) {
					jsonResponse.put("status", "success");
				} else {
					jsonResponse.put("status", "failure");
				}
				System.out.println("Exception Saved");
		   } catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch(Exception e){
			e.printStackTrace();
		}
		
		sendJSONObject(jsonResponse);
		return null;
		
	}

	public String delete() {
		try {
			String exceptions = request.getParameter("exceptions");

			JSONObject jsonObject = new JSONObject(exceptions);
			JSONArray nodeIdList;
			JSONArray dealIdList;
			
			nodeIdList = jsonObject.getJSONArray("nodeIds");
			dealIdList = jsonObject.getJSONArray("dealIds");
			
			String[] nodeIds = null;
			String[] dealIds = null;
			
			nodeIds = new String[nodeIdList.length()];
			dealIds = new String[dealIdList.length()];
			for(int i = 0; i < nodeIdList.length(); i++) {
				JSONObject nodeId = (JSONObject)nodeIdList.get(i);
				nodeIds[i] = nodeId.getString("item");
				JSONObject dealId = (JSONObject)dealIdList.get(i);
				dealIds[i] = dealId.getString("item");
			}
			
			JSONObject jsonResponse = new JSONObject();
			boolean success = getApasService().deleteDealException(nodeIds,dealIds);
			if (success) {
				jsonResponse.put("status", "success");
			} else {
				jsonResponse.put("status", "failure");
			}

			response.setStatus(200);			
			PrintWriter out = response.getWriter();	
			out.print(jsonResponse.toString());	
			out.flush();
			response.flushBuffer();
			out.close();
		} catch (Exception e) {
			System.out.println("Error in Deal Exception delete operation");
			e.printStackTrace();
			
		}
		
		return null;
	}
	
	
	public String edit() {

		if(logger.isInfoEnabled()) {
			logger.info("Calling DealExceptionAction edit...");
		}

		try{

			long dealId = request.getParameter("dealId")!=null ? Long.parseLong(request.getParameter("dealId")) : 0;
			long nodeId = request.getParameter("nodeId")!=null ? Long.parseLong(request.getParameter("nodeId")) : 0;
			
			logger.info("dealId : " + dealId + "  | nodeId : " + nodeId);
			
			DealException dExceptions = getApasService().getDealException(dealId, nodeId);
			
			logger.info("DealExceptionAction edit --> PartnerName : " + dExceptions.getPartnerName());
			
			request.setAttribute("DealException",dExceptions);

		}catch(Exception e){
			e.printStackTrace();
			return APASConstants.ERROR;
		}
		return APASConstants.EDIT;
		
	}
	
	
	public String update() {

		if(logger.isInfoEnabled()) {
			logger.info("Calling DealExceptionAction update...");
		}

		JSONObject jsonResponse = new JSONObject();
		try{

		    SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");

			long dealId = request.getParameter("dealId")!=null ? Long.parseLong(request.getParameter("dealId")) : 0;
			long nodeId = request.getParameter("nodeId")!=null ? Long.parseLong(request.getParameter("nodeId")) : 0;
			String dealName = request.getParameter("dealName");
			if (dealName != null && dealName.lastIndexOf("(") > 0) {
				dealName = dealName.substring(0, dealName.lastIndexOf("("));
			}
			String stDt = request.getParameter("startDate");
			Date startDate = (stDt!=null && stDt.trim().length()>0) ? dateFormat.parse(stDt) : null;
			String edDt = request.getParameter("endDate");
			Date endDate = (edDt!=null && edDt.trim().length()>0) ? dateFormat.parse(edDt) : null;
			String description = request.getParameter("description");
			String userId = request.getRemoteUser();
			
			logger.info("DealExceptionAction update --> dealId : " + dealId + "  | nodeId : " + nodeId  + "  | dealName : " + dealName  + "  | startDate : " + startDate  + "  | endDate : " + endDate  + "  | description : " + description);
			
			dealExceptionId dId = new dealExceptionId();
			dId.setDealId( dealId );
			dId.setNodeId( nodeId );
			DealException dExcep = new DealException(); 
			dExcep.setId(dId);
			dExcep.setDealName(dealName);
			dExcep.setStartDate(startDate);
			dExcep.setEndDate(endDate);
			dExcep.setExceptionDescription(description);
			dExcep.setUpdatedBy(userId);
			
			int i = getApasService().updateDealException(dExcep);
			
			logger.info("DealException Count : " + i);
			
			if (i>0) {
				jsonResponse.put("status", "success");
			} else {
				jsonResponse.put("status", "failure");
			}
			
			
		}catch(Exception e){
			e.printStackTrace();
		}
		sendJSONObject(jsonResponse);
		return null;

		
	}
		
	public String searchDealName() {
		
		String searchTerm = request.getParameter("term");

		JSONArray jsonDealsArray = new JSONArray();
		
		if (!StringUtils.isEmpty(searchTerm)) {
			List<Deal> deals = getApasService().getDeals(searchTerm.trim());

			if (deals != null && deals.size() > 0) {
				for (Deal deal : deals) {
					jsonDealsArray.put(deal.getName() + " (" + deal.getId() + ")");
				}
			} else {
				jsonDealsArray.put("No matching result found.");
			}
		} else {
			jsonDealsArray.put("Please enter a valid input.");
		}
		
		sendJSONObject(jsonDealsArray);
		
		return null;
	}
	
	public void afterPropertiesSet() throws Exception {
		// TODO Auto-generated method stub
	}

	public APASService getApasService() {
		return apasService;
	}

	public void setApasService(APASService apasService) {
		this.apasService = apasService;
	}

	public String getNodeName() {
		return nodeName;
	}

	public void setNodeName(String nodeName) {
		this.nodeName = nodeName;
	}

	public String getAllNodeIds() {
		return allNodeIds;
	}

	public void setAllNodeIds(String allNodeIds) {
		this.allNodeIds = allNodeIds;
	}

	public String getAllNodeNames() {
		return allNodeNames;
	}

	public void setAllNodeNames(String allNodeNames) {
		this.allNodeNames = allNodeNames;
	}

	public Node[] getNodeList() {
		return nodeList;
	}

	public void setNodeList(Node[] nodeList) {
		this.nodeList = nodeList;
	}

	public int getCountDException() {
		return countDException;
	}

	public void setCountDException(int countDException) {
		this.countDException = countDException;
	}

}
